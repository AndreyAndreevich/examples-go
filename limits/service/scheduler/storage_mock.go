// Code generated by mockery v2.30.16. DO NOT EDIT.

package scheduler

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// StorageMock is an autogenerated mock type for the storage type
type StorageMock struct {
	mock.Mock
}

// CleanupContext provides a mock function with given fields: _a0, _a1
func (_m *StorageMock) CleanupContext(_a0 context.Context, _a1 time.Duration) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanupCounters provides a mock function with given fields: _a0, _a1
func (_m *StorageMock) CleanupCounters(_a0 context.Context, _a1 time.Duration) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanupLimits provides a mock function with given fields: ctx
func (_m *StorageMock) CleanupLimits(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
