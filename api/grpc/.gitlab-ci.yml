stages:
  - check
  - compile
  - publish

include:
  - /apps/.gitlab-ci.yml


.check-golang:
  tags:
    - k8s
  image: registry.com/tools/golang-proto-builder
  stage: check
  variables: # Example set of required variables
    PROTOFILE_PATH: example/client.proto
    ADDITIONAL_OPTIONS: --go_opt=
    PROTO_LOOKUP_ROOT: ./
  script:
    - protoc -I=${PROTO_LOOKUP_ROOT} --go_out=./build --go-grpc_out=./build ${ADDITIONAL_OPTIONS} ./${PROTOFILE_PATH}

.check-python:
  tags:
    - k8s
  image: registry.com/tools/python-proto-builder
  stage: check
  variables: # Example set of required variables
    PROTOFILE_PATH: example/client.proto
    PROTO_LOOKUP_ROOT: ./
  script:
    - python -m grpc_tools.protoc -I ${PROTO_LOOKUP_ROOT} --python_out=./build --mypy_out=./build --grpc_python_out=./build ${PROTOFILE_PATH}

.compile-golang:
  stage: compile
  extends:
    - .check-golang
  variables: # Example set of required variables
    PROTOFILE_PATH: example/client.proto
  artifacts:
    paths:
      - build
    expire_in: 1 week

.compile-python:
  stage: compile
  extends:
    - .check-python
  variables: # Example set of required variables
    PROTOFILE_PATH: example/client.proto
  artifacts:
    paths:
      - build
      - dist/python
    expire_in: 1 week

.publish-golang:
  tags:
    - k8s
  image: registry.com/tools/git
  stage: publish
  dependencies: []
  variables: # Example set of required variables
    GIT_STRATEGY: none
    GIT_REPOSITORY_CLONE_URI: git@gitlab.com:test/package/example.git
    BUILD_FOLDER: example
  script:
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_KEY" | tr -d '\r' | ssh-add -
    - echo "Package name - ${BUILD_FOLDER}"
    - PACKAGE_VERSION=v$(echo $CI_COMMIT_TAG | sed -E 's/[^0-9]+//')
    - echo "Package version - ${PACKAGE_VERSION}"
    - git clone ${GIT_REPOSITORY_CLONE_URI} package-folder
    - rm -rf ./package-folder/*
    - cp ./build/${BUILD_FOLDER}/* ./package-folder
    - cd ./package-folder
    - |-
      if [[ ! -z "$(git status --porcelain)" ]]; then
          echo "Pushing changes"
          git add .
          git commit -m "Add files for version - ${PACKAGE_VERSION}" --no-verify
      fi
    - git tag ${PACKAGE_VERSION}
    - git push origin HEAD --tags

.publish-python:
  tags:
    - k8s
  image: registry.com/tools/python-package-builder
  stage: publish
  dependencies: []
  variables: # Example set of required variables
    GIT_STRATEGY: none
    BUILD_FOLDER: example
    PACKAGE_NAME: example
  script:
    - cat ${CI_PYPIRC} > ~/.pypirc
    - echo "Package name - ${PACKAGE_NAME}"
    - PACKAGE_VERSION=$(echo $CI_COMMIT_TAG | sed -E 's/[^0-9]+//')
    - echo "Package version - ${PACKAGE_VERSION}"
    - touch ./build/${BUILD_FOLDER}/__init__.py
    - touch ./build/${BUILD_FOLDER}/py.typed
    - mkdir ./package-folder
    - cp -R ./build/${BUILD_FOLDER} ./package-folder/${PACKAGE_NAME}
    - cp ./dist/python/setup.py ./package-folder/
#    fix imports in files generated by the gRPC Python protocol compiler plugin
    - cd ./package-folder/${PACKAGE_NAME}
#    - sed -i "s/from apps.test.models/from models/" *.py*
    - sed -i "s/from apps.[[:alnum:]_]*/from ./" *.py*

    - cd ..
    - sed -i "s/%NAME%/${PACKAGE_NAME}/g" setup.py
    - sed -i "s/%VERSION%/${PACKAGE_VERSION}/g" setup.py
    - python setup.py sdist bdist_wheel
    - python -m twine upload --repository nexus.com dist/* --verbose