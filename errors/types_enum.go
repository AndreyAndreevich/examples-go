// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package errors

import (
	"errors"
	"fmt"
)

const (
	// TypeUnknown is a Type of type Unknown.
	TypeUnknown Type = iota
	// TypeInvalidRequest is a Type of type InvalidRequest.
	TypeInvalidRequest
	// TypeNotFound is a Type of type NotFound.
	TypeNotFound
	// TypeUnauthorized is a Type of type Unauthorized.
	TypeUnauthorized
	// TypeDatabase is a Type of type Database.
	TypeDatabase
	// TypeInternal is a Type of type Internal.
	TypeInternal
	// TypeExternal is a Type of type External.
	TypeExternal
	// TypeNotImplemented is a Type of type NotImplemented.
	TypeNotImplemented
)

var ErrInvalidType = errors.New("not a valid Type")

const _TypeName = "UnknownInvalidRequestNotFoundUnauthorizedDatabaseInternalExternalNotImplemented"

var _TypeMap = map[Type]string{
	TypeUnknown:        _TypeName[0:7],
	TypeInvalidRequest: _TypeName[7:21],
	TypeNotFound:       _TypeName[21:29],
	TypeUnauthorized:   _TypeName[29:41],
	TypeDatabase:       _TypeName[41:49],
	TypeInternal:       _TypeName[49:57],
	TypeExternal:       _TypeName[57:65],
	TypeNotImplemented: _TypeName[65:79],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Type{
	_TypeName[0:7]:   TypeUnknown,
	_TypeName[7:21]:  TypeInvalidRequest,
	_TypeName[21:29]: TypeNotFound,
	_TypeName[29:41]: TypeUnauthorized,
	_TypeName[41:49]: TypeDatabase,
	_TypeName[49:57]: TypeInternal,
	_TypeName[57:65]: TypeExternal,
	_TypeName[65:79]: TypeNotImplemented,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}
