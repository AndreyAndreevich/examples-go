// Code generated by gowrap. DO NOT EDIT.
// template: template_metrics
// gowrap: http://github.com/hexdigest/gowrap

package redis

//go:generate gowrap gen -p github.com/redis/go-redis/v9 -i Cmdable -t template_metrics -o collector_methods.go -l ""

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
)

func (c *DBCollector) ACLDryRun(ctx context.Context, username string, command ...interface{}) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ACLDryRun(ctx, username, command...)

	collectMetrics(c.collector, startTime, "ACLDryRun", sp1.Err())

	return sp1
}

func (c *DBCollector) ACLLog(ctx context.Context, count int64) (ap1 *redis.ACLLogCmd) {
	startTime := time.Now()

	ap1 = c.Storage.ACLLog(ctx, count)

	collectMetrics(c.collector, startTime, "ACLLog", ap1.Err())

	return ap1
}

func (c *DBCollector) ACLLogReset(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ACLLogReset(ctx)

	collectMetrics(c.collector, startTime, "ACLLogReset", sp1.Err())

	return sp1
}

func (c *DBCollector) Append(ctx context.Context, key string, value string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Append(ctx, key, value)

	collectMetrics(c.collector, startTime, "Append", ip1.Err())

	return ip1
}

func (c *DBCollector) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) (kp1 *redis.KeyValuesCmd) {
	startTime := time.Now()

	kp1 = c.Storage.BLMPop(ctx, timeout, direction, count, keys...)

	collectMetrics(c.collector, startTime, "BLMPop", kp1.Err())

	return kp1
}

func (c *DBCollector) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.BLMove(ctx, source, destination, srcpos, destpos, timeout)

	collectMetrics(c.collector, startTime, "BLMove", sp1.Err())

	return sp1
}

func (c *DBCollector) BLPop(ctx context.Context, timeout time.Duration, keys ...string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.BLPop(ctx, timeout, keys...)

	collectMetrics(c.collector, startTime, "BLPop", sp1.Err())

	return sp1
}

func (c *DBCollector) BRPop(ctx context.Context, timeout time.Duration, keys ...string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.BRPop(ctx, timeout, keys...)

	collectMetrics(c.collector, startTime, "BRPop", sp1.Err())

	return sp1
}

func (c *DBCollector) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.BRPopLPush(ctx, source, destination, timeout)

	collectMetrics(c.collector, startTime, "BRPopLPush", sp1.Err())

	return sp1
}

func (c *DBCollector) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) (zp1 *redis.ZSliceWithKeyCmd) {
	startTime := time.Now()

	zp1 = c.Storage.BZMPop(ctx, timeout, order, count, keys...)

	collectMetrics(c.collector, startTime, "BZMPop", zp1.Err())

	return zp1
}

func (c *DBCollector) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) (zp1 *redis.ZWithKeyCmd) {
	startTime := time.Now()

	zp1 = c.Storage.BZPopMax(ctx, timeout, keys...)

	collectMetrics(c.collector, startTime, "BZPopMax", zp1.Err())

	return zp1
}

func (c *DBCollector) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) (zp1 *redis.ZWithKeyCmd) {
	startTime := time.Now()

	zp1 = c.Storage.BZPopMin(ctx, timeout, keys...)

	collectMetrics(c.collector, startTime, "BZPopMin", zp1.Err())

	return zp1
}

func (c *DBCollector) BgRewriteAOF(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.BgRewriteAOF(ctx)

	collectMetrics(c.collector, startTime, "BgRewriteAOF", sp1.Err())

	return sp1
}

func (c *DBCollector) BgSave(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.BgSave(ctx)

	collectMetrics(c.collector, startTime, "BgSave", sp1.Err())

	return sp1
}

func (c *DBCollector) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitCount(ctx, key, bitCount)

	collectMetrics(c.collector, startTime, "BitCount", ip1.Err())

	return ip1
}

func (c *DBCollector) BitField(ctx context.Context, key string, args ...interface{}) (ip1 *redis.IntSliceCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitField(ctx, key, args...)

	collectMetrics(c.collector, startTime, "BitField", ip1.Err())

	return ip1
}

func (c *DBCollector) BitOpAnd(ctx context.Context, destKey string, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitOpAnd(ctx, destKey, keys...)

	collectMetrics(c.collector, startTime, "BitOpAnd", ip1.Err())

	return ip1
}

func (c *DBCollector) BitOpNot(ctx context.Context, destKey string, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitOpNot(ctx, destKey, key)

	collectMetrics(c.collector, startTime, "BitOpNot", ip1.Err())

	return ip1
}

func (c *DBCollector) BitOpOr(ctx context.Context, destKey string, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitOpOr(ctx, destKey, keys...)

	collectMetrics(c.collector, startTime, "BitOpOr", ip1.Err())

	return ip1
}

func (c *DBCollector) BitOpXor(ctx context.Context, destKey string, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitOpXor(ctx, destKey, keys...)

	collectMetrics(c.collector, startTime, "BitOpXor", ip1.Err())

	return ip1
}

func (c *DBCollector) BitPos(ctx context.Context, key string, bit int64, pos ...int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitPos(ctx, key, bit, pos...)

	collectMetrics(c.collector, startTime, "BitPos", ip1.Err())

	return ip1
}

func (c *DBCollector) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.BitPosSpan(ctx, key, bit, start, end, span)

	collectMetrics(c.collector, startTime, "BitPosSpan", ip1.Err())

	return ip1
}

func (c *DBCollector) ClientGetName(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClientGetName(ctx)

	collectMetrics(c.collector, startTime, "ClientGetName", sp1.Err())

	return sp1
}

func (c *DBCollector) ClientID(ctx context.Context) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ClientID(ctx)

	collectMetrics(c.collector, startTime, "ClientID", ip1.Err())

	return ip1
}

func (c *DBCollector) ClientInfo(ctx context.Context) (cp1 *redis.ClientInfoCmd) {
	startTime := time.Now()

	cp1 = c.Storage.ClientInfo(ctx)

	collectMetrics(c.collector, startTime, "ClientInfo", cp1.Err())

	return cp1
}

func (c *DBCollector) ClientKill(ctx context.Context, ipPort string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClientKill(ctx, ipPort)

	collectMetrics(c.collector, startTime, "ClientKill", sp1.Err())

	return sp1
}

func (c *DBCollector) ClientKillByFilter(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ClientKillByFilter(ctx, keys...)

	collectMetrics(c.collector, startTime, "ClientKillByFilter", ip1.Err())

	return ip1
}

func (c *DBCollector) ClientList(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClientList(ctx)

	collectMetrics(c.collector, startTime, "ClientList", sp1.Err())

	return sp1
}

func (c *DBCollector) ClientPause(ctx context.Context, dur time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ClientPause(ctx, dur)

	collectMetrics(c.collector, startTime, "ClientPause", bp1.Err())

	return bp1
}

func (c *DBCollector) ClientUnblock(ctx context.Context, id int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ClientUnblock(ctx, id)

	collectMetrics(c.collector, startTime, "ClientUnblock", ip1.Err())

	return ip1
}

func (c *DBCollector) ClientUnblockWithError(ctx context.Context, id int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ClientUnblockWithError(ctx, id)

	collectMetrics(c.collector, startTime, "ClientUnblockWithError", ip1.Err())

	return ip1
}

func (c *DBCollector) ClientUnpause(ctx context.Context) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ClientUnpause(ctx)

	collectMetrics(c.collector, startTime, "ClientUnpause", bp1.Err())

	return bp1
}

func (c *DBCollector) ClusterAddSlots(ctx context.Context, slots ...int) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterAddSlots(ctx, slots...)

	collectMetrics(c.collector, startTime, "ClusterAddSlots", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterAddSlotsRange(ctx context.Context, min int, max int) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterAddSlotsRange(ctx, min, max)

	collectMetrics(c.collector, startTime, "ClusterAddSlotsRange", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterCountFailureReports(ctx context.Context, nodeID string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ClusterCountFailureReports(ctx, nodeID)

	collectMetrics(c.collector, startTime, "ClusterCountFailureReports", ip1.Err())

	return ip1
}

func (c *DBCollector) ClusterCountKeysInSlot(ctx context.Context, slot int) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ClusterCountKeysInSlot(ctx, slot)

	collectMetrics(c.collector, startTime, "ClusterCountKeysInSlot", ip1.Err())

	return ip1
}

func (c *DBCollector) ClusterDelSlots(ctx context.Context, slots ...int) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterDelSlots(ctx, slots...)

	collectMetrics(c.collector, startTime, "ClusterDelSlots", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterDelSlotsRange(ctx context.Context, min int, max int) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterDelSlotsRange(ctx, min, max)

	collectMetrics(c.collector, startTime, "ClusterDelSlotsRange", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterFailover(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterFailover(ctx)

	collectMetrics(c.collector, startTime, "ClusterFailover", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterForget(ctx context.Context, nodeID string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterForget(ctx, nodeID)

	collectMetrics(c.collector, startTime, "ClusterForget", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterGetKeysInSlot(ctx, slot, count)

	collectMetrics(c.collector, startTime, "ClusterGetKeysInSlot", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterInfo(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterInfo(ctx)

	collectMetrics(c.collector, startTime, "ClusterInfo", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterKeySlot(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ClusterKeySlot(ctx, key)

	collectMetrics(c.collector, startTime, "ClusterKeySlot", ip1.Err())

	return ip1
}

func (c *DBCollector) ClusterLinks(ctx context.Context) (cp1 *redis.ClusterLinksCmd) {
	startTime := time.Now()

	cp1 = c.Storage.ClusterLinks(ctx)

	collectMetrics(c.collector, startTime, "ClusterLinks", cp1.Err())

	return cp1
}

func (c *DBCollector) ClusterMeet(ctx context.Context, host string, port string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterMeet(ctx, host, port)

	collectMetrics(c.collector, startTime, "ClusterMeet", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterMyShardID(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterMyShardID(ctx)

	collectMetrics(c.collector, startTime, "ClusterMyShardID", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterNodes(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterNodes(ctx)

	collectMetrics(c.collector, startTime, "ClusterNodes", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterReplicate(ctx context.Context, nodeID string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterReplicate(ctx, nodeID)

	collectMetrics(c.collector, startTime, "ClusterReplicate", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterResetHard(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterResetHard(ctx)

	collectMetrics(c.collector, startTime, "ClusterResetHard", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterResetSoft(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterResetSoft(ctx)

	collectMetrics(c.collector, startTime, "ClusterResetSoft", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterSaveConfig(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterSaveConfig(ctx)

	collectMetrics(c.collector, startTime, "ClusterSaveConfig", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterShards(ctx context.Context) (cp1 *redis.ClusterShardsCmd) {
	startTime := time.Now()

	cp1 = c.Storage.ClusterShards(ctx)

	collectMetrics(c.collector, startTime, "ClusterShards", cp1.Err())

	return cp1
}

func (c *DBCollector) ClusterSlaves(ctx context.Context, nodeID string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ClusterSlaves(ctx, nodeID)

	collectMetrics(c.collector, startTime, "ClusterSlaves", sp1.Err())

	return sp1
}

func (c *DBCollector) ClusterSlots(ctx context.Context) (cp1 *redis.ClusterSlotsCmd) {
	startTime := time.Now()

	cp1 = c.Storage.ClusterSlots(ctx)

	collectMetrics(c.collector, startTime, "ClusterSlots", cp1.Err())

	return cp1
}

func (c *DBCollector) Command(ctx context.Context) (cp1 *redis.CommandsInfoCmd) {
	startTime := time.Now()

	cp1 = c.Storage.Command(ctx)

	collectMetrics(c.collector, startTime, "Command", cp1.Err())

	return cp1
}

func (c *DBCollector) CommandGetKeys(ctx context.Context, commands ...interface{}) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.CommandGetKeys(ctx, commands...)

	collectMetrics(c.collector, startTime, "CommandGetKeys", sp1.Err())

	return sp1
}

func (c *DBCollector) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) (kp1 *redis.KeyFlagsCmd) {
	startTime := time.Now()

	kp1 = c.Storage.CommandGetKeysAndFlags(ctx, commands...)

	collectMetrics(c.collector, startTime, "CommandGetKeysAndFlags", kp1.Err())

	return kp1
}

func (c *DBCollector) CommandList(ctx context.Context, filter *redis.FilterBy) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.CommandList(ctx, filter)

	collectMetrics(c.collector, startTime, "CommandList", sp1.Err())

	return sp1
}

func (c *DBCollector) ConfigGet(ctx context.Context, parameter string) (mp1 *redis.MapStringStringCmd) {
	startTime := time.Now()

	mp1 = c.Storage.ConfigGet(ctx, parameter)

	collectMetrics(c.collector, startTime, "ConfigGet", mp1.Err())

	return mp1
}

func (c *DBCollector) ConfigResetStat(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ConfigResetStat(ctx)

	collectMetrics(c.collector, startTime, "ConfigResetStat", sp1.Err())

	return sp1
}

func (c *DBCollector) ConfigRewrite(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ConfigRewrite(ctx)

	collectMetrics(c.collector, startTime, "ConfigRewrite", sp1.Err())

	return sp1
}

func (c *DBCollector) ConfigSet(ctx context.Context, parameter string, value string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ConfigSet(ctx, parameter, value)

	collectMetrics(c.collector, startTime, "ConfigSet", sp1.Err())

	return sp1
}

func (c *DBCollector) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Copy(ctx, sourceKey, destKey, db, replace)

	collectMetrics(c.collector, startTime, "Copy", ip1.Err())

	return ip1
}

func (c *DBCollector) DBSize(ctx context.Context) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.DBSize(ctx)

	collectMetrics(c.collector, startTime, "DBSize", ip1.Err())

	return ip1
}

func (c *DBCollector) DebugObject(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.DebugObject(ctx, key)

	collectMetrics(c.collector, startTime, "DebugObject", sp1.Err())

	return sp1
}

func (c *DBCollector) Decr(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Decr(ctx, key)

	collectMetrics(c.collector, startTime, "Decr", ip1.Err())

	return ip1
}

func (c *DBCollector) DecrBy(ctx context.Context, key string, decrement int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.DecrBy(ctx, key, decrement)

	collectMetrics(c.collector, startTime, "DecrBy", ip1.Err())

	return ip1
}

func (c *DBCollector) Del(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Del(ctx, keys...)

	collectMetrics(c.collector, startTime, "Del", ip1.Err())

	return ip1
}

func (c *DBCollector) Dump(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Dump(ctx, key)

	collectMetrics(c.collector, startTime, "Dump", sp1.Err())

	return sp1
}

func (c *DBCollector) Echo(ctx context.Context, message interface{}) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Echo(ctx, message)

	collectMetrics(c.collector, startTime, "Echo", sp1.Err())

	return sp1
}

func (c *DBCollector) Eval(ctx context.Context, script string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	startTime := time.Now()

	cp1 = c.Storage.Eval(ctx, script, keys, args...)

	collectMetrics(c.collector, startTime, "Eval", cp1.Err())

	return cp1
}

func (c *DBCollector) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	startTime := time.Now()

	cp1 = c.Storage.EvalRO(ctx, script, keys, args...)

	collectMetrics(c.collector, startTime, "EvalRO", cp1.Err())

	return cp1
}

func (c *DBCollector) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	startTime := time.Now()

	cp1 = c.Storage.EvalSha(ctx, sha1, keys, args...)

	collectMetrics(c.collector, startTime, "EvalSha", cp1.Err())

	return cp1
}

func (c *DBCollector) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	startTime := time.Now()

	cp1 = c.Storage.EvalShaRO(ctx, sha1, keys, args...)

	collectMetrics(c.collector, startTime, "EvalShaRO", cp1.Err())

	return cp1
}

func (c *DBCollector) Exists(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Exists(ctx, keys...)

	collectMetrics(c.collector, startTime, "Exists", ip1.Err())

	return ip1
}

func (c *DBCollector) Expire(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.Expire(ctx, key, expiration)

	collectMetrics(c.collector, startTime, "Expire", bp1.Err())

	return bp1
}

func (c *DBCollector) ExpireAt(ctx context.Context, key string, tm time.Time) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ExpireAt(ctx, key, tm)

	collectMetrics(c.collector, startTime, "ExpireAt", bp1.Err())

	return bp1
}

func (c *DBCollector) ExpireGT(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ExpireGT(ctx, key, expiration)

	collectMetrics(c.collector, startTime, "ExpireGT", bp1.Err())

	return bp1
}

func (c *DBCollector) ExpireLT(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ExpireLT(ctx, key, expiration)

	collectMetrics(c.collector, startTime, "ExpireLT", bp1.Err())

	return bp1
}

func (c *DBCollector) ExpireNX(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ExpireNX(ctx, key, expiration)

	collectMetrics(c.collector, startTime, "ExpireNX", bp1.Err())

	return bp1
}

func (c *DBCollector) ExpireTime(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	startTime := time.Now()

	dp1 = c.Storage.ExpireTime(ctx, key)

	collectMetrics(c.collector, startTime, "ExpireTime", dp1.Err())

	return dp1
}

func (c *DBCollector) ExpireXX(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ExpireXX(ctx, key, expiration)

	collectMetrics(c.collector, startTime, "ExpireXX", bp1.Err())

	return bp1
}

func (c *DBCollector) FCall(ctx context.Context, function string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	startTime := time.Now()

	cp1 = c.Storage.FCall(ctx, function, keys, args...)

	collectMetrics(c.collector, startTime, "FCall", cp1.Err())

	return cp1
}

func (c *DBCollector) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	startTime := time.Now()

	cp1 = c.Storage.FCallRO(ctx, function, keys, args...)

	collectMetrics(c.collector, startTime, "FCallRO", cp1.Err())

	return cp1
}

func (c *DBCollector) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	startTime := time.Now()

	cp1 = c.Storage.FCallRo(ctx, function, keys, args...)

	collectMetrics(c.collector, startTime, "FCallRo", cp1.Err())

	return cp1
}

func (c *DBCollector) FlushAll(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FlushAll(ctx)

	collectMetrics(c.collector, startTime, "FlushAll", sp1.Err())

	return sp1
}

func (c *DBCollector) FlushAllAsync(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FlushAllAsync(ctx)

	collectMetrics(c.collector, startTime, "FlushAllAsync", sp1.Err())

	return sp1
}

func (c *DBCollector) FlushDB(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FlushDB(ctx)

	collectMetrics(c.collector, startTime, "FlushDB", sp1.Err())

	return sp1
}

func (c *DBCollector) FlushDBAsync(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FlushDBAsync(ctx)

	collectMetrics(c.collector, startTime, "FlushDBAsync", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionDelete(ctx context.Context, libName string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionDelete(ctx, libName)

	collectMetrics(c.collector, startTime, "FunctionDelete", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionDump(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionDump(ctx)

	collectMetrics(c.collector, startTime, "FunctionDump", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionFlush(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionFlush(ctx)

	collectMetrics(c.collector, startTime, "FunctionFlush", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionFlushAsync(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionFlushAsync(ctx)

	collectMetrics(c.collector, startTime, "FunctionFlushAsync", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionKill(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionKill(ctx)

	collectMetrics(c.collector, startTime, "FunctionKill", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionList(ctx context.Context, q redis.FunctionListQuery) (fp1 *redis.FunctionListCmd) {
	startTime := time.Now()

	fp1 = c.Storage.FunctionList(ctx, q)

	collectMetrics(c.collector, startTime, "FunctionList", fp1.Err())

	return fp1
}

func (c *DBCollector) FunctionLoad(ctx context.Context, code string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionLoad(ctx, code)

	collectMetrics(c.collector, startTime, "FunctionLoad", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionLoadReplace(ctx context.Context, code string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionLoadReplace(ctx, code)

	collectMetrics(c.collector, startTime, "FunctionLoadReplace", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionRestore(ctx context.Context, libDump string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.FunctionRestore(ctx, libDump)

	collectMetrics(c.collector, startTime, "FunctionRestore", sp1.Err())

	return sp1
}

func (c *DBCollector) FunctionStats(ctx context.Context) (fp1 *redis.FunctionStatsCmd) {
	startTime := time.Now()

	fp1 = c.Storage.FunctionStats(ctx)

	collectMetrics(c.collector, startTime, "FunctionStats", fp1.Err())

	return fp1
}

func (c *DBCollector) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.GeoAdd(ctx, key, geoLocation...)

	collectMetrics(c.collector, startTime, "GeoAdd", ip1.Err())

	return ip1
}

func (c *DBCollector) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) (fp1 *redis.FloatCmd) {
	startTime := time.Now()

	fp1 = c.Storage.GeoDist(ctx, key, member1, member2, unit)

	collectMetrics(c.collector, startTime, "GeoDist", fp1.Err())

	return fp1
}

func (c *DBCollector) GeoHash(ctx context.Context, key string, members ...string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.GeoHash(ctx, key, members...)

	collectMetrics(c.collector, startTime, "GeoHash", sp1.Err())

	return sp1
}

func (c *DBCollector) GeoPos(ctx context.Context, key string, members ...string) (gp1 *redis.GeoPosCmd) {
	startTime := time.Now()

	gp1 = c.Storage.GeoPos(ctx, key, members...)

	collectMetrics(c.collector, startTime, "GeoPos", gp1.Err())

	return gp1
}

func (c *DBCollector) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) (gp1 *redis.GeoLocationCmd) {
	startTime := time.Now()

	gp1 = c.Storage.GeoRadius(ctx, key, longitude, latitude, query)

	collectMetrics(c.collector, startTime, "GeoRadius", gp1.Err())

	return gp1
}

func (c *DBCollector) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) (gp1 *redis.GeoLocationCmd) {
	startTime := time.Now()

	gp1 = c.Storage.GeoRadiusByMember(ctx, key, member, query)

	collectMetrics(c.collector, startTime, "GeoRadiusByMember", gp1.Err())

	return gp1
}

func (c *DBCollector) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.GeoRadiusByMemberStore(ctx, key, member, query)

	collectMetrics(c.collector, startTime, "GeoRadiusByMemberStore", ip1.Err())

	return ip1
}

func (c *DBCollector) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.GeoRadiusStore(ctx, key, longitude, latitude, query)

	collectMetrics(c.collector, startTime, "GeoRadiusStore", ip1.Err())

	return ip1
}

func (c *DBCollector) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.GeoSearch(ctx, key, q)

	collectMetrics(c.collector, startTime, "GeoSearch", sp1.Err())

	return sp1
}

func (c *DBCollector) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) (gp1 *redis.GeoSearchLocationCmd) {
	startTime := time.Now()

	gp1 = c.Storage.GeoSearchLocation(ctx, key, q)

	collectMetrics(c.collector, startTime, "GeoSearchLocation", gp1.Err())

	return gp1
}

func (c *DBCollector) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.GeoSearchStore(ctx, key, store, q)

	collectMetrics(c.collector, startTime, "GeoSearchStore", ip1.Err())

	return ip1
}

func (c *DBCollector) Get(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Get(ctx, key)

	collectMetrics(c.collector, startTime, "Get", sp1.Err())

	return sp1
}

func (c *DBCollector) GetBit(ctx context.Context, key string, offset int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.GetBit(ctx, key, offset)

	collectMetrics(c.collector, startTime, "GetBit", ip1.Err())

	return ip1
}

func (c *DBCollector) GetDel(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.GetDel(ctx, key)

	collectMetrics(c.collector, startTime, "GetDel", sp1.Err())

	return sp1
}

func (c *DBCollector) GetEx(ctx context.Context, key string, expiration time.Duration) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.GetEx(ctx, key, expiration)

	collectMetrics(c.collector, startTime, "GetEx", sp1.Err())

	return sp1
}

func (c *DBCollector) GetRange(ctx context.Context, key string, start int64, end int64) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.GetRange(ctx, key, start, end)

	collectMetrics(c.collector, startTime, "GetRange", sp1.Err())

	return sp1
}

func (c *DBCollector) GetSet(ctx context.Context, key string, value interface{}) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.GetSet(ctx, key, value)

	collectMetrics(c.collector, startTime, "GetSet", sp1.Err())

	return sp1
}

func (c *DBCollector) HDel(ctx context.Context, key string, fields ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.HDel(ctx, key, fields...)

	collectMetrics(c.collector, startTime, "HDel", ip1.Err())

	return ip1
}

func (c *DBCollector) HExists(ctx context.Context, key string, field string) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.HExists(ctx, key, field)

	collectMetrics(c.collector, startTime, "HExists", bp1.Err())

	return bp1
}

func (c *DBCollector) HGet(ctx context.Context, key string, field string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.HGet(ctx, key, field)

	collectMetrics(c.collector, startTime, "HGet", sp1.Err())

	return sp1
}

func (c *DBCollector) HGetAll(ctx context.Context, key string) (mp1 *redis.MapStringStringCmd) {
	startTime := time.Now()

	mp1 = c.Storage.HGetAll(ctx, key)

	collectMetrics(c.collector, startTime, "HGetAll", mp1.Err())

	return mp1
}

func (c *DBCollector) HIncrBy(ctx context.Context, key string, field string, incr int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.HIncrBy(ctx, key, field, incr)

	collectMetrics(c.collector, startTime, "HIncrBy", ip1.Err())

	return ip1
}

func (c *DBCollector) HIncrByFloat(ctx context.Context, key string, field string, incr float64) (fp1 *redis.FloatCmd) {
	startTime := time.Now()

	fp1 = c.Storage.HIncrByFloat(ctx, key, field, incr)

	collectMetrics(c.collector, startTime, "HIncrByFloat", fp1.Err())

	return fp1
}

func (c *DBCollector) HKeys(ctx context.Context, key string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.HKeys(ctx, key)

	collectMetrics(c.collector, startTime, "HKeys", sp1.Err())

	return sp1
}

func (c *DBCollector) HLen(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.HLen(ctx, key)

	collectMetrics(c.collector, startTime, "HLen", ip1.Err())

	return ip1
}

func (c *DBCollector) HMGet(ctx context.Context, key string, fields ...string) (sp1 *redis.SliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.HMGet(ctx, key, fields...)

	collectMetrics(c.collector, startTime, "HMGet", sp1.Err())

	return sp1
}

func (c *DBCollector) HMSet(ctx context.Context, key string, values ...interface{}) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.HMSet(ctx, key, values...)

	collectMetrics(c.collector, startTime, "HMSet", bp1.Err())

	return bp1
}

func (c *DBCollector) HRandField(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.HRandField(ctx, key, count)

	collectMetrics(c.collector, startTime, "HRandField", sp1.Err())

	return sp1
}

func (c *DBCollector) HRandFieldWithValues(ctx context.Context, key string, count int) (kp1 *redis.KeyValueSliceCmd) {
	startTime := time.Now()

	kp1 = c.Storage.HRandFieldWithValues(ctx, key, count)

	collectMetrics(c.collector, startTime, "HRandFieldWithValues", kp1.Err())

	return kp1
}

func (c *DBCollector) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	startTime := time.Now()

	sp1 = c.Storage.HScan(ctx, key, cursor, match, count)

	collectMetrics(c.collector, startTime, "HScan", sp1.Err())

	return sp1
}

func (c *DBCollector) HSet(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.HSet(ctx, key, values...)

	collectMetrics(c.collector, startTime, "HSet", ip1.Err())

	return ip1
}

func (c *DBCollector) HSetNX(ctx context.Context, key string, field string, value interface{}) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.HSetNX(ctx, key, field, value)

	collectMetrics(c.collector, startTime, "HSetNX", bp1.Err())

	return bp1
}

func (c *DBCollector) HVals(ctx context.Context, key string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.HVals(ctx, key)

	collectMetrics(c.collector, startTime, "HVals", sp1.Err())

	return sp1
}

func (c *DBCollector) Incr(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Incr(ctx, key)

	collectMetrics(c.collector, startTime, "Incr", ip1.Err())

	return ip1
}

func (c *DBCollector) IncrBy(ctx context.Context, key string, value int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.IncrBy(ctx, key, value)

	collectMetrics(c.collector, startTime, "IncrBy", ip1.Err())

	return ip1
}

func (c *DBCollector) IncrByFloat(ctx context.Context, key string, value float64) (fp1 *redis.FloatCmd) {
	startTime := time.Now()

	fp1 = c.Storage.IncrByFloat(ctx, key, value)

	collectMetrics(c.collector, startTime, "IncrByFloat", fp1.Err())

	return fp1
}

func (c *DBCollector) Info(ctx context.Context, section ...string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Info(ctx, section...)

	collectMetrics(c.collector, startTime, "Info", sp1.Err())

	return sp1
}

func (c *DBCollector) Keys(ctx context.Context, pattern string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Keys(ctx, pattern)

	collectMetrics(c.collector, startTime, "Keys", sp1.Err())

	return sp1
}

func (c *DBCollector) LCS(ctx context.Context, q *redis.LCSQuery) (lp1 *redis.LCSCmd) {
	startTime := time.Now()

	lp1 = c.Storage.LCS(ctx, q)

	collectMetrics(c.collector, startTime, "LCS", lp1.Err())

	return lp1
}

func (c *DBCollector) LIndex(ctx context.Context, key string, index int64) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.LIndex(ctx, key, index)

	collectMetrics(c.collector, startTime, "LIndex", sp1.Err())

	return sp1
}

func (c *DBCollector) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LInsert(ctx, key, op, pivot, value)

	collectMetrics(c.collector, startTime, "LInsert", ip1.Err())

	return ip1
}

func (c *DBCollector) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LInsertAfter(ctx, key, pivot, value)

	collectMetrics(c.collector, startTime, "LInsertAfter", ip1.Err())

	return ip1
}

func (c *DBCollector) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LInsertBefore(ctx, key, pivot, value)

	collectMetrics(c.collector, startTime, "LInsertBefore", ip1.Err())

	return ip1
}

func (c *DBCollector) LLen(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LLen(ctx, key)

	collectMetrics(c.collector, startTime, "LLen", ip1.Err())

	return ip1
}

func (c *DBCollector) LMPop(ctx context.Context, direction string, count int64, keys ...string) (kp1 *redis.KeyValuesCmd) {
	startTime := time.Now()

	kp1 = c.Storage.LMPop(ctx, direction, count, keys...)

	collectMetrics(c.collector, startTime, "LMPop", kp1.Err())

	return kp1
}

func (c *DBCollector) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.LMove(ctx, source, destination, srcpos, destpos)

	collectMetrics(c.collector, startTime, "LMove", sp1.Err())

	return sp1
}

func (c *DBCollector) LPop(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.LPop(ctx, key)

	collectMetrics(c.collector, startTime, "LPop", sp1.Err())

	return sp1
}

func (c *DBCollector) LPopCount(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.LPopCount(ctx, key, count)

	collectMetrics(c.collector, startTime, "LPopCount", sp1.Err())

	return sp1
}

func (c *DBCollector) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LPos(ctx, key, value, args)

	collectMetrics(c.collector, startTime, "LPos", ip1.Err())

	return ip1
}

func (c *DBCollector) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) (ip1 *redis.IntSliceCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LPosCount(ctx, key, value, count, args)

	collectMetrics(c.collector, startTime, "LPosCount", ip1.Err())

	return ip1
}

func (c *DBCollector) LPush(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LPush(ctx, key, values...)

	collectMetrics(c.collector, startTime, "LPush", ip1.Err())

	return ip1
}

func (c *DBCollector) LPushX(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LPushX(ctx, key, values...)

	collectMetrics(c.collector, startTime, "LPushX", ip1.Err())

	return ip1
}

func (c *DBCollector) LRange(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.LRange(ctx, key, start, stop)

	collectMetrics(c.collector, startTime, "LRange", sp1.Err())

	return sp1
}

func (c *DBCollector) LRem(ctx context.Context, key string, count int64, value interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LRem(ctx, key, count, value)

	collectMetrics(c.collector, startTime, "LRem", ip1.Err())

	return ip1
}

func (c *DBCollector) LSet(ctx context.Context, key string, index int64, value interface{}) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.LSet(ctx, key, index, value)

	collectMetrics(c.collector, startTime, "LSet", sp1.Err())

	return sp1
}

func (c *DBCollector) LTrim(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.LTrim(ctx, key, start, stop)

	collectMetrics(c.collector, startTime, "LTrim", sp1.Err())

	return sp1
}

func (c *DBCollector) LastSave(ctx context.Context) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.LastSave(ctx)

	collectMetrics(c.collector, startTime, "LastSave", ip1.Err())

	return ip1
}

func (c *DBCollector) MGet(ctx context.Context, keys ...string) (sp1 *redis.SliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.MGet(ctx, keys...)

	collectMetrics(c.collector, startTime, "MGet", sp1.Err())

	return sp1
}

func (c *DBCollector) MSet(ctx context.Context, values ...interface{}) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.MSet(ctx, values...)

	collectMetrics(c.collector, startTime, "MSet", sp1.Err())

	return sp1
}

func (c *DBCollector) MSetNX(ctx context.Context, values ...interface{}) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.MSetNX(ctx, values...)

	collectMetrics(c.collector, startTime, "MSetNX", bp1.Err())

	return bp1
}

func (c *DBCollector) MemoryUsage(ctx context.Context, key string, samples ...int) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.MemoryUsage(ctx, key, samples...)

	collectMetrics(c.collector, startTime, "MemoryUsage", ip1.Err())

	return ip1
}

func (c *DBCollector) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Migrate(ctx, host, port, key, db, timeout)

	collectMetrics(c.collector, startTime, "Migrate", sp1.Err())

	return sp1
}

func (c *DBCollector) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ModuleLoadex(ctx, conf)

	collectMetrics(c.collector, startTime, "ModuleLoadex", sp1.Err())

	return sp1
}

func (c *DBCollector) Move(ctx context.Context, key string, db int) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.Move(ctx, key, db)

	collectMetrics(c.collector, startTime, "Move", bp1.Err())

	return bp1
}

func (c *DBCollector) ObjectEncoding(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ObjectEncoding(ctx, key)

	collectMetrics(c.collector, startTime, "ObjectEncoding", sp1.Err())

	return sp1
}

func (c *DBCollector) ObjectIdleTime(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	startTime := time.Now()

	dp1 = c.Storage.ObjectIdleTime(ctx, key)

	collectMetrics(c.collector, startTime, "ObjectIdleTime", dp1.Err())

	return dp1
}

func (c *DBCollector) ObjectRefCount(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ObjectRefCount(ctx, key)

	collectMetrics(c.collector, startTime, "ObjectRefCount", ip1.Err())

	return ip1
}

func (c *DBCollector) PExpire(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.PExpire(ctx, key, expiration)

	collectMetrics(c.collector, startTime, "PExpire", bp1.Err())

	return bp1
}

func (c *DBCollector) PExpireAt(ctx context.Context, key string, tm time.Time) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.PExpireAt(ctx, key, tm)

	collectMetrics(c.collector, startTime, "PExpireAt", bp1.Err())

	return bp1
}

func (c *DBCollector) PExpireTime(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	startTime := time.Now()

	dp1 = c.Storage.PExpireTime(ctx, key)

	collectMetrics(c.collector, startTime, "PExpireTime", dp1.Err())

	return dp1
}

func (c *DBCollector) PFAdd(ctx context.Context, key string, els ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.PFAdd(ctx, key, els...)

	collectMetrics(c.collector, startTime, "PFAdd", ip1.Err())

	return ip1
}

func (c *DBCollector) PFCount(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.PFCount(ctx, keys...)

	collectMetrics(c.collector, startTime, "PFCount", ip1.Err())

	return ip1
}

func (c *DBCollector) PFMerge(ctx context.Context, dest string, keys ...string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.PFMerge(ctx, dest, keys...)

	collectMetrics(c.collector, startTime, "PFMerge", sp1.Err())

	return sp1
}

func (c *DBCollector) PTTL(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	startTime := time.Now()

	dp1 = c.Storage.PTTL(ctx, key)

	collectMetrics(c.collector, startTime, "PTTL", dp1.Err())

	return dp1
}

func (c *DBCollector) Persist(ctx context.Context, key string) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.Persist(ctx, key)

	collectMetrics(c.collector, startTime, "Persist", bp1.Err())

	return bp1
}

func (c *DBCollector) Ping(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Ping(ctx)

	collectMetrics(c.collector, startTime, "Ping", sp1.Err())

	return sp1
}

func (c *DBCollector) PubSubChannels(ctx context.Context, pattern string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.PubSubChannels(ctx, pattern)

	collectMetrics(c.collector, startTime, "PubSubChannels", sp1.Err())

	return sp1
}

func (c *DBCollector) PubSubNumPat(ctx context.Context) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.PubSubNumPat(ctx)

	collectMetrics(c.collector, startTime, "PubSubNumPat", ip1.Err())

	return ip1
}

func (c *DBCollector) PubSubNumSub(ctx context.Context, channels ...string) (mp1 *redis.MapStringIntCmd) {
	startTime := time.Now()

	mp1 = c.Storage.PubSubNumSub(ctx, channels...)

	collectMetrics(c.collector, startTime, "PubSubNumSub", mp1.Err())

	return mp1
}

func (c *DBCollector) PubSubShardChannels(ctx context.Context, pattern string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.PubSubShardChannels(ctx, pattern)

	collectMetrics(c.collector, startTime, "PubSubShardChannels", sp1.Err())

	return sp1
}

func (c *DBCollector) PubSubShardNumSub(ctx context.Context, channels ...string) (mp1 *redis.MapStringIntCmd) {
	startTime := time.Now()

	mp1 = c.Storage.PubSubShardNumSub(ctx, channels...)

	collectMetrics(c.collector, startTime, "PubSubShardNumSub", mp1.Err())

	return mp1
}

func (c *DBCollector) Publish(ctx context.Context, channel string, message interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Publish(ctx, channel, message)

	collectMetrics(c.collector, startTime, "Publish", ip1.Err())

	return ip1
}

func (c *DBCollector) Quit(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Quit(ctx)

	collectMetrics(c.collector, startTime, "Quit", sp1.Err())

	return sp1
}

func (c *DBCollector) RPop(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.RPop(ctx, key)

	collectMetrics(c.collector, startTime, "RPop", sp1.Err())

	return sp1
}

func (c *DBCollector) RPopCount(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.RPopCount(ctx, key, count)

	collectMetrics(c.collector, startTime, "RPopCount", sp1.Err())

	return sp1
}

func (c *DBCollector) RPopLPush(ctx context.Context, source string, destination string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.RPopLPush(ctx, source, destination)

	collectMetrics(c.collector, startTime, "RPopLPush", sp1.Err())

	return sp1
}

func (c *DBCollector) RPush(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.RPush(ctx, key, values...)

	collectMetrics(c.collector, startTime, "RPush", ip1.Err())

	return ip1
}

func (c *DBCollector) RPushX(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.RPushX(ctx, key, values...)

	collectMetrics(c.collector, startTime, "RPushX", ip1.Err())

	return ip1
}

func (c *DBCollector) RandomKey(ctx context.Context) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.RandomKey(ctx)

	collectMetrics(c.collector, startTime, "RandomKey", sp1.Err())

	return sp1
}

func (c *DBCollector) ReadOnly(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ReadOnly(ctx)

	collectMetrics(c.collector, startTime, "ReadOnly", sp1.Err())

	return sp1
}

func (c *DBCollector) ReadWrite(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ReadWrite(ctx)

	collectMetrics(c.collector, startTime, "ReadWrite", sp1.Err())

	return sp1
}

func (c *DBCollector) Rename(ctx context.Context, key string, newkey string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Rename(ctx, key, newkey)

	collectMetrics(c.collector, startTime, "Rename", sp1.Err())

	return sp1
}

func (c *DBCollector) RenameNX(ctx context.Context, key string, newkey string) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.RenameNX(ctx, key, newkey)

	collectMetrics(c.collector, startTime, "RenameNX", bp1.Err())

	return bp1
}

func (c *DBCollector) Restore(ctx context.Context, key string, ttl time.Duration, value string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Restore(ctx, key, ttl, value)

	collectMetrics(c.collector, startTime, "Restore", sp1.Err())

	return sp1
}

func (c *DBCollector) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.RestoreReplace(ctx, key, ttl, value)

	collectMetrics(c.collector, startTime, "RestoreReplace", sp1.Err())

	return sp1
}

func (c *DBCollector) SAdd(ctx context.Context, key string, members ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SAdd(ctx, key, members...)

	collectMetrics(c.collector, startTime, "SAdd", ip1.Err())

	return ip1
}

func (c *DBCollector) SCard(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SCard(ctx, key)

	collectMetrics(c.collector, startTime, "SCard", ip1.Err())

	return ip1
}

func (c *DBCollector) SDiff(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SDiff(ctx, keys...)

	collectMetrics(c.collector, startTime, "SDiff", sp1.Err())

	return sp1
}

func (c *DBCollector) SDiffStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SDiffStore(ctx, destination, keys...)

	collectMetrics(c.collector, startTime, "SDiffStore", ip1.Err())

	return ip1
}

func (c *DBCollector) SInter(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SInter(ctx, keys...)

	collectMetrics(c.collector, startTime, "SInter", sp1.Err())

	return sp1
}

func (c *DBCollector) SInterCard(ctx context.Context, limit int64, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SInterCard(ctx, limit, keys...)

	collectMetrics(c.collector, startTime, "SInterCard", ip1.Err())

	return ip1
}

func (c *DBCollector) SInterStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SInterStore(ctx, destination, keys...)

	collectMetrics(c.collector, startTime, "SInterStore", ip1.Err())

	return ip1
}

func (c *DBCollector) SIsMember(ctx context.Context, key string, member interface{}) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.SIsMember(ctx, key, member)

	collectMetrics(c.collector, startTime, "SIsMember", bp1.Err())

	return bp1
}

func (c *DBCollector) SMIsMember(ctx context.Context, key string, members ...interface{}) (bp1 *redis.BoolSliceCmd) {
	startTime := time.Now()

	bp1 = c.Storage.SMIsMember(ctx, key, members...)

	collectMetrics(c.collector, startTime, "SMIsMember", bp1.Err())

	return bp1
}

func (c *DBCollector) SMembers(ctx context.Context, key string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SMembers(ctx, key)

	collectMetrics(c.collector, startTime, "SMembers", sp1.Err())

	return sp1
}

func (c *DBCollector) SMembersMap(ctx context.Context, key string) (sp1 *redis.StringStructMapCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SMembersMap(ctx, key)

	collectMetrics(c.collector, startTime, "SMembersMap", sp1.Err())

	return sp1
}

func (c *DBCollector) SMove(ctx context.Context, source string, destination string, member interface{}) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.SMove(ctx, source, destination, member)

	collectMetrics(c.collector, startTime, "SMove", bp1.Err())

	return bp1
}

func (c *DBCollector) SPop(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SPop(ctx, key)

	collectMetrics(c.collector, startTime, "SPop", sp1.Err())

	return sp1
}

func (c *DBCollector) SPopN(ctx context.Context, key string, count int64) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SPopN(ctx, key, count)

	collectMetrics(c.collector, startTime, "SPopN", sp1.Err())

	return sp1
}

func (c *DBCollector) SPublish(ctx context.Context, channel string, message interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SPublish(ctx, channel, message)

	collectMetrics(c.collector, startTime, "SPublish", ip1.Err())

	return ip1
}

func (c *DBCollector) SRandMember(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SRandMember(ctx, key)

	collectMetrics(c.collector, startTime, "SRandMember", sp1.Err())

	return sp1
}

func (c *DBCollector) SRandMemberN(ctx context.Context, key string, count int64) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SRandMemberN(ctx, key, count)

	collectMetrics(c.collector, startTime, "SRandMemberN", sp1.Err())

	return sp1
}

func (c *DBCollector) SRem(ctx context.Context, key string, members ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SRem(ctx, key, members...)

	collectMetrics(c.collector, startTime, "SRem", ip1.Err())

	return ip1
}

func (c *DBCollector) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SScan(ctx, key, cursor, match, count)

	collectMetrics(c.collector, startTime, "SScan", sp1.Err())

	return sp1
}

func (c *DBCollector) SUnion(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SUnion(ctx, keys...)

	collectMetrics(c.collector, startTime, "SUnion", sp1.Err())

	return sp1
}

func (c *DBCollector) SUnionStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SUnionStore(ctx, destination, keys...)

	collectMetrics(c.collector, startTime, "SUnionStore", ip1.Err())

	return ip1
}

func (c *DBCollector) Save(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Save(ctx)

	collectMetrics(c.collector, startTime, "Save", sp1.Err())

	return sp1
}

func (c *DBCollector) Scan(ctx context.Context, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Scan(ctx, cursor, match, count)

	collectMetrics(c.collector, startTime, "Scan", sp1.Err())

	return sp1
}

func (c *DBCollector) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) (sp1 *redis.ScanCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ScanType(ctx, cursor, match, count, keyType)

	collectMetrics(c.collector, startTime, "ScanType", sp1.Err())

	return sp1
}

func (c *DBCollector) ScriptExists(ctx context.Context, hashes ...string) (bp1 *redis.BoolSliceCmd) {
	startTime := time.Now()

	bp1 = c.Storage.ScriptExists(ctx, hashes...)

	collectMetrics(c.collector, startTime, "ScriptExists", bp1.Err())

	return bp1
}

func (c *DBCollector) ScriptFlush(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ScriptFlush(ctx)

	collectMetrics(c.collector, startTime, "ScriptFlush", sp1.Err())

	return sp1
}

func (c *DBCollector) ScriptKill(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ScriptKill(ctx)

	collectMetrics(c.collector, startTime, "ScriptKill", sp1.Err())

	return sp1
}

func (c *DBCollector) ScriptLoad(ctx context.Context, script string) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ScriptLoad(ctx, script)

	collectMetrics(c.collector, startTime, "ScriptLoad", sp1.Err())

	return sp1
}

func (c *DBCollector) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Set(ctx, key, value, expiration)

	collectMetrics(c.collector, startTime, "Set", sp1.Err())

	return sp1
}

func (c *DBCollector) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SetArgs(ctx, key, value, a)

	collectMetrics(c.collector, startTime, "SetArgs", sp1.Err())

	return sp1
}

func (c *DBCollector) SetBit(ctx context.Context, key string, offset int64, value int) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SetBit(ctx, key, offset, value)

	collectMetrics(c.collector, startTime, "SetBit", ip1.Err())

	return ip1
}

func (c *DBCollector) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SetEx(ctx, key, value, expiration)

	collectMetrics(c.collector, startTime, "SetEx", sp1.Err())

	return sp1
}

func (c *DBCollector) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.SetNX(ctx, key, value, expiration)

	collectMetrics(c.collector, startTime, "SetNX", bp1.Err())

	return bp1
}

func (c *DBCollector) SetRange(ctx context.Context, key string, offset int64, value string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SetRange(ctx, key, offset, value)

	collectMetrics(c.collector, startTime, "SetRange", ip1.Err())

	return ip1
}

func (c *DBCollector) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) (bp1 *redis.BoolCmd) {
	startTime := time.Now()

	bp1 = c.Storage.SetXX(ctx, key, value, expiration)

	collectMetrics(c.collector, startTime, "SetXX", bp1.Err())

	return bp1
}

func (c *DBCollector) Shutdown(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Shutdown(ctx)

	collectMetrics(c.collector, startTime, "Shutdown", sp1.Err())

	return sp1
}

func (c *DBCollector) ShutdownNoSave(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ShutdownNoSave(ctx)

	collectMetrics(c.collector, startTime, "ShutdownNoSave", sp1.Err())

	return sp1
}

func (c *DBCollector) ShutdownSave(ctx context.Context) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ShutdownSave(ctx)

	collectMetrics(c.collector, startTime, "ShutdownSave", sp1.Err())

	return sp1
}

func (c *DBCollector) SlaveOf(ctx context.Context, host string, port string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SlaveOf(ctx, host, port)

	collectMetrics(c.collector, startTime, "SlaveOf", sp1.Err())

	return sp1
}

func (c *DBCollector) SlowLogGet(ctx context.Context, num int64) (sp1 *redis.SlowLogCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SlowLogGet(ctx, num)

	collectMetrics(c.collector, startTime, "SlowLogGet", sp1.Err())

	return sp1
}

func (c *DBCollector) Sort(ctx context.Context, key string, sort *redis.Sort) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Sort(ctx, key, sort)

	collectMetrics(c.collector, startTime, "Sort", sp1.Err())

	return sp1
}

func (c *DBCollector) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) (sp1 *redis.SliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SortInterfaces(ctx, key, sort)

	collectMetrics(c.collector, startTime, "SortInterfaces", sp1.Err())

	return sp1
}

func (c *DBCollector) SortRO(ctx context.Context, key string, sort *redis.Sort) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.SortRO(ctx, key, sort)

	collectMetrics(c.collector, startTime, "SortRO", sp1.Err())

	return sp1
}

func (c *DBCollector) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.SortStore(ctx, key, store, sort)

	collectMetrics(c.collector, startTime, "SortStore", ip1.Err())

	return ip1
}

func (c *DBCollector) StrLen(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.StrLen(ctx, key)

	collectMetrics(c.collector, startTime, "StrLen", ip1.Err())

	return ip1
}

func (c *DBCollector) TTL(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	startTime := time.Now()

	dp1 = c.Storage.TTL(ctx, key)

	collectMetrics(c.collector, startTime, "TTL", dp1.Err())

	return dp1
}

func (c *DBCollector) Time(ctx context.Context) (tp1 *redis.TimeCmd) {
	startTime := time.Now()

	tp1 = c.Storage.Time(ctx)

	collectMetrics(c.collector, startTime, "Time", tp1.Err())

	return tp1
}

func (c *DBCollector) Touch(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Touch(ctx, keys...)

	collectMetrics(c.collector, startTime, "Touch", ip1.Err())

	return ip1
}

func (c *DBCollector) Type(ctx context.Context, key string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.Type(ctx, key)

	collectMetrics(c.collector, startTime, "Type", sp1.Err())

	return sp1
}

func (c *DBCollector) Unlink(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.Unlink(ctx, keys...)

	collectMetrics(c.collector, startTime, "Unlink", ip1.Err())

	return ip1
}

func (c *DBCollector) XAck(ctx context.Context, stream string, group string, ids ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XAck(ctx, stream, group, ids...)

	collectMetrics(c.collector, startTime, "XAck", ip1.Err())

	return ip1
}

func (c *DBCollector) XAdd(ctx context.Context, a *redis.XAddArgs) (sp1 *redis.StringCmd) {
	startTime := time.Now()

	sp1 = c.Storage.XAdd(ctx, a)

	collectMetrics(c.collector, startTime, "XAdd", sp1.Err())

	return sp1
}

func (c *DBCollector) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) (xp1 *redis.XAutoClaimCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XAutoClaim(ctx, a)

	collectMetrics(c.collector, startTime, "XAutoClaim", xp1.Err())

	return xp1
}

func (c *DBCollector) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) (xp1 *redis.XAutoClaimJustIDCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XAutoClaimJustID(ctx, a)

	collectMetrics(c.collector, startTime, "XAutoClaimJustID", xp1.Err())

	return xp1
}

func (c *DBCollector) XClaim(ctx context.Context, a *redis.XClaimArgs) (xp1 *redis.XMessageSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XClaim(ctx, a)

	collectMetrics(c.collector, startTime, "XClaim", xp1.Err())

	return xp1
}

func (c *DBCollector) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.XClaimJustID(ctx, a)

	collectMetrics(c.collector, startTime, "XClaimJustID", sp1.Err())

	return sp1
}

func (c *DBCollector) XDel(ctx context.Context, stream string, ids ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XDel(ctx, stream, ids...)

	collectMetrics(c.collector, startTime, "XDel", ip1.Err())

	return ip1
}

func (c *DBCollector) XGroupCreate(ctx context.Context, stream string, group string, start string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.XGroupCreate(ctx, stream, group, start)

	collectMetrics(c.collector, startTime, "XGroupCreate", sp1.Err())

	return sp1
}

func (c *DBCollector) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XGroupCreateConsumer(ctx, stream, group, consumer)

	collectMetrics(c.collector, startTime, "XGroupCreateConsumer", ip1.Err())

	return ip1
}

func (c *DBCollector) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.XGroupCreateMkStream(ctx, stream, group, start)

	collectMetrics(c.collector, startTime, "XGroupCreateMkStream", sp1.Err())

	return sp1
}

func (c *DBCollector) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XGroupDelConsumer(ctx, stream, group, consumer)

	collectMetrics(c.collector, startTime, "XGroupDelConsumer", ip1.Err())

	return ip1
}

func (c *DBCollector) XGroupDestroy(ctx context.Context, stream string, group string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XGroupDestroy(ctx, stream, group)

	collectMetrics(c.collector, startTime, "XGroupDestroy", ip1.Err())

	return ip1
}

func (c *DBCollector) XGroupSetID(ctx context.Context, stream string, group string, start string) (sp1 *redis.StatusCmd) {
	startTime := time.Now()

	sp1 = c.Storage.XGroupSetID(ctx, stream, group, start)

	collectMetrics(c.collector, startTime, "XGroupSetID", sp1.Err())

	return sp1
}

func (c *DBCollector) XInfoConsumers(ctx context.Context, key string, group string) (xp1 *redis.XInfoConsumersCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XInfoConsumers(ctx, key, group)

	collectMetrics(c.collector, startTime, "XInfoConsumers", xp1.Err())

	return xp1
}

func (c *DBCollector) XInfoGroups(ctx context.Context, key string) (xp1 *redis.XInfoGroupsCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XInfoGroups(ctx, key)

	collectMetrics(c.collector, startTime, "XInfoGroups", xp1.Err())

	return xp1
}

func (c *DBCollector) XInfoStream(ctx context.Context, key string) (xp1 *redis.XInfoStreamCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XInfoStream(ctx, key)

	collectMetrics(c.collector, startTime, "XInfoStream", xp1.Err())

	return xp1
}

func (c *DBCollector) XInfoStreamFull(ctx context.Context, key string, count int) (xp1 *redis.XInfoStreamFullCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XInfoStreamFull(ctx, key, count)

	collectMetrics(c.collector, startTime, "XInfoStreamFull", xp1.Err())

	return xp1
}

func (c *DBCollector) XLen(ctx context.Context, stream string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XLen(ctx, stream)

	collectMetrics(c.collector, startTime, "XLen", ip1.Err())

	return ip1
}

func (c *DBCollector) XPending(ctx context.Context, stream string, group string) (xp1 *redis.XPendingCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XPending(ctx, stream, group)

	collectMetrics(c.collector, startTime, "XPending", xp1.Err())

	return xp1
}

func (c *DBCollector) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) (xp1 *redis.XPendingExtCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XPendingExt(ctx, a)

	collectMetrics(c.collector, startTime, "XPendingExt", xp1.Err())

	return xp1
}

func (c *DBCollector) XRange(ctx context.Context, stream string, start string, stop string) (xp1 *redis.XMessageSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XRange(ctx, stream, start, stop)

	collectMetrics(c.collector, startTime, "XRange", xp1.Err())

	return xp1
}

func (c *DBCollector) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) (xp1 *redis.XMessageSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XRangeN(ctx, stream, start, stop, count)

	collectMetrics(c.collector, startTime, "XRangeN", xp1.Err())

	return xp1
}

func (c *DBCollector) XRead(ctx context.Context, a *redis.XReadArgs) (xp1 *redis.XStreamSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XRead(ctx, a)

	collectMetrics(c.collector, startTime, "XRead", xp1.Err())

	return xp1
}

func (c *DBCollector) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) (xp1 *redis.XStreamSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XReadGroup(ctx, a)

	collectMetrics(c.collector, startTime, "XReadGroup", xp1.Err())

	return xp1
}

func (c *DBCollector) XReadStreams(ctx context.Context, streams ...string) (xp1 *redis.XStreamSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XReadStreams(ctx, streams...)

	collectMetrics(c.collector, startTime, "XReadStreams", xp1.Err())

	return xp1
}

func (c *DBCollector) XRevRange(ctx context.Context, stream string, start string, stop string) (xp1 *redis.XMessageSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XRevRange(ctx, stream, start, stop)

	collectMetrics(c.collector, startTime, "XRevRange", xp1.Err())

	return xp1
}

func (c *DBCollector) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) (xp1 *redis.XMessageSliceCmd) {
	startTime := time.Now()

	xp1 = c.Storage.XRevRangeN(ctx, stream, start, stop, count)

	collectMetrics(c.collector, startTime, "XRevRangeN", xp1.Err())

	return xp1
}

func (c *DBCollector) XTrimMaxLen(ctx context.Context, key string, maxLen int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XTrimMaxLen(ctx, key, maxLen)

	collectMetrics(c.collector, startTime, "XTrimMaxLen", ip1.Err())

	return ip1
}

func (c *DBCollector) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XTrimMaxLenApprox(ctx, key, maxLen, limit)

	collectMetrics(c.collector, startTime, "XTrimMaxLenApprox", ip1.Err())

	return ip1
}

func (c *DBCollector) XTrimMinID(ctx context.Context, key string, minID string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XTrimMinID(ctx, key, minID)

	collectMetrics(c.collector, startTime, "XTrimMinID", ip1.Err())

	return ip1
}

func (c *DBCollector) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.XTrimMinIDApprox(ctx, key, minID, limit)

	collectMetrics(c.collector, startTime, "XTrimMinIDApprox", ip1.Err())

	return ip1
}

func (c *DBCollector) ZAdd(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZAdd(ctx, key, members...)

	collectMetrics(c.collector, startTime, "ZAdd", ip1.Err())

	return ip1
}

func (c *DBCollector) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZAddArgs(ctx, key, args)

	collectMetrics(c.collector, startTime, "ZAddArgs", ip1.Err())

	return ip1
}

func (c *DBCollector) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) (fp1 *redis.FloatCmd) {
	startTime := time.Now()

	fp1 = c.Storage.ZAddArgsIncr(ctx, key, args)

	collectMetrics(c.collector, startTime, "ZAddArgsIncr", fp1.Err())

	return fp1
}

func (c *DBCollector) ZAddGT(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZAddGT(ctx, key, members...)

	collectMetrics(c.collector, startTime, "ZAddGT", ip1.Err())

	return ip1
}

func (c *DBCollector) ZAddLT(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZAddLT(ctx, key, members...)

	collectMetrics(c.collector, startTime, "ZAddLT", ip1.Err())

	return ip1
}

func (c *DBCollector) ZAddNX(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZAddNX(ctx, key, members...)

	collectMetrics(c.collector, startTime, "ZAddNX", ip1.Err())

	return ip1
}

func (c *DBCollector) ZAddXX(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZAddXX(ctx, key, members...)

	collectMetrics(c.collector, startTime, "ZAddXX", ip1.Err())

	return ip1
}

func (c *DBCollector) ZCard(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZCard(ctx, key)

	collectMetrics(c.collector, startTime, "ZCard", ip1.Err())

	return ip1
}

func (c *DBCollector) ZCount(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZCount(ctx, key, min, max)

	collectMetrics(c.collector, startTime, "ZCount", ip1.Err())

	return ip1
}

func (c *DBCollector) ZDiff(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZDiff(ctx, keys...)

	collectMetrics(c.collector, startTime, "ZDiff", sp1.Err())

	return sp1
}

func (c *DBCollector) ZDiffStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZDiffStore(ctx, destination, keys...)

	collectMetrics(c.collector, startTime, "ZDiffStore", ip1.Err())

	return ip1
}

func (c *DBCollector) ZDiffWithScores(ctx context.Context, keys ...string) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZDiffWithScores(ctx, keys...)

	collectMetrics(c.collector, startTime, "ZDiffWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZIncrBy(ctx context.Context, key string, increment float64, member string) (fp1 *redis.FloatCmd) {
	startTime := time.Now()

	fp1 = c.Storage.ZIncrBy(ctx, key, increment, member)

	collectMetrics(c.collector, startTime, "ZIncrBy", fp1.Err())

	return fp1
}

func (c *DBCollector) ZInter(ctx context.Context, store *redis.ZStore) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZInter(ctx, store)

	collectMetrics(c.collector, startTime, "ZInter", sp1.Err())

	return sp1
}

func (c *DBCollector) ZInterCard(ctx context.Context, limit int64, keys ...string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZInterCard(ctx, limit, keys...)

	collectMetrics(c.collector, startTime, "ZInterCard", ip1.Err())

	return ip1
}

func (c *DBCollector) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZInterStore(ctx, destination, store)

	collectMetrics(c.collector, startTime, "ZInterStore", ip1.Err())

	return ip1
}

func (c *DBCollector) ZInterWithScores(ctx context.Context, store *redis.ZStore) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZInterWithScores(ctx, store)

	collectMetrics(c.collector, startTime, "ZInterWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZLexCount(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZLexCount(ctx, key, min, max)

	collectMetrics(c.collector, startTime, "ZLexCount", ip1.Err())

	return ip1
}

func (c *DBCollector) ZMPop(ctx context.Context, order string, count int64, keys ...string) (zp1 *redis.ZSliceWithKeyCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZMPop(ctx, order, count, keys...)

	collectMetrics(c.collector, startTime, "ZMPop", zp1.Err())

	return zp1
}

func (c *DBCollector) ZMScore(ctx context.Context, key string, members ...string) (fp1 *redis.FloatSliceCmd) {
	startTime := time.Now()

	fp1 = c.Storage.ZMScore(ctx, key, members...)

	collectMetrics(c.collector, startTime, "ZMScore", fp1.Err())

	return fp1
}

func (c *DBCollector) ZPopMax(ctx context.Context, key string, count ...int64) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZPopMax(ctx, key, count...)

	collectMetrics(c.collector, startTime, "ZPopMax", zp1.Err())

	return zp1
}

func (c *DBCollector) ZPopMin(ctx context.Context, key string, count ...int64) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZPopMin(ctx, key, count...)

	collectMetrics(c.collector, startTime, "ZPopMin", zp1.Err())

	return zp1
}

func (c *DBCollector) ZRandMember(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRandMember(ctx, key, count)

	collectMetrics(c.collector, startTime, "ZRandMember", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRandMemberWithScores(ctx context.Context, key string, count int) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZRandMemberWithScores(ctx, key, count)

	collectMetrics(c.collector, startTime, "ZRandMemberWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZRange(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRange(ctx, key, start, stop)

	collectMetrics(c.collector, startTime, "ZRange", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRangeArgs(ctx, z)

	collectMetrics(c.collector, startTime, "ZRangeArgs", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZRangeArgsWithScores(ctx, z)

	collectMetrics(c.collector, startTime, "ZRangeArgsWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRangeByLex(ctx, key, opt)

	collectMetrics(c.collector, startTime, "ZRangeByLex", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRangeByScore(ctx, key, opt)

	collectMetrics(c.collector, startTime, "ZRangeByScore", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZRangeByScoreWithScores(ctx, key, opt)

	collectMetrics(c.collector, startTime, "ZRangeByScoreWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZRangeStore(ctx, dst, z)

	collectMetrics(c.collector, startTime, "ZRangeStore", ip1.Err())

	return ip1
}

func (c *DBCollector) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZRangeWithScores(ctx, key, start, stop)

	collectMetrics(c.collector, startTime, "ZRangeWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZRank(ctx context.Context, key string, member string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZRank(ctx, key, member)

	collectMetrics(c.collector, startTime, "ZRank", ip1.Err())

	return ip1
}

func (c *DBCollector) ZRankWithScore(ctx context.Context, key string, member string) (rp1 *redis.RankWithScoreCmd) {
	startTime := time.Now()

	rp1 = c.Storage.ZRankWithScore(ctx, key, member)

	collectMetrics(c.collector, startTime, "ZRankWithScore", rp1.Err())

	return rp1
}

func (c *DBCollector) ZRem(ctx context.Context, key string, members ...interface{}) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZRem(ctx, key, members...)

	collectMetrics(c.collector, startTime, "ZRem", ip1.Err())

	return ip1
}

func (c *DBCollector) ZRemRangeByLex(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZRemRangeByLex(ctx, key, min, max)

	collectMetrics(c.collector, startTime, "ZRemRangeByLex", ip1.Err())

	return ip1
}

func (c *DBCollector) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZRemRangeByRank(ctx, key, start, stop)

	collectMetrics(c.collector, startTime, "ZRemRangeByRank", ip1.Err())

	return ip1
}

func (c *DBCollector) ZRemRangeByScore(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZRemRangeByScore(ctx, key, min, max)

	collectMetrics(c.collector, startTime, "ZRemRangeByScore", ip1.Err())

	return ip1
}

func (c *DBCollector) ZRevRange(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRevRange(ctx, key, start, stop)

	collectMetrics(c.collector, startTime, "ZRevRange", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRevRangeByLex(ctx, key, opt)

	collectMetrics(c.collector, startTime, "ZRevRangeByLex", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZRevRangeByScore(ctx, key, opt)

	collectMetrics(c.collector, startTime, "ZRevRangeByScore", sp1.Err())

	return sp1
}

func (c *DBCollector) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZRevRangeByScoreWithScores(ctx, key, opt)

	collectMetrics(c.collector, startTime, "ZRevRangeByScoreWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZRevRangeWithScores(ctx, key, start, stop)

	collectMetrics(c.collector, startTime, "ZRevRangeWithScores", zp1.Err())

	return zp1
}

func (c *DBCollector) ZRevRank(ctx context.Context, key string, member string) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZRevRank(ctx, key, member)

	collectMetrics(c.collector, startTime, "ZRevRank", ip1.Err())

	return ip1
}

func (c *DBCollector) ZRevRankWithScore(ctx context.Context, key string, member string) (rp1 *redis.RankWithScoreCmd) {
	startTime := time.Now()

	rp1 = c.Storage.ZRevRankWithScore(ctx, key, member)

	collectMetrics(c.collector, startTime, "ZRevRankWithScore", rp1.Err())

	return rp1
}

func (c *DBCollector) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZScan(ctx, key, cursor, match, count)

	collectMetrics(c.collector, startTime, "ZScan", sp1.Err())

	return sp1
}

func (c *DBCollector) ZScore(ctx context.Context, key string, member string) (fp1 *redis.FloatCmd) {
	startTime := time.Now()

	fp1 = c.Storage.ZScore(ctx, key, member)

	collectMetrics(c.collector, startTime, "ZScore", fp1.Err())

	return fp1
}

func (c *DBCollector) ZUnion(ctx context.Context, store redis.ZStore) (sp1 *redis.StringSliceCmd) {
	startTime := time.Now()

	sp1 = c.Storage.ZUnion(ctx, store)

	collectMetrics(c.collector, startTime, "ZUnion", sp1.Err())

	return sp1
}

func (c *DBCollector) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) (ip1 *redis.IntCmd) {
	startTime := time.Now()

	ip1 = c.Storage.ZUnionStore(ctx, dest, store)

	collectMetrics(c.collector, startTime, "ZUnionStore", ip1.Err())

	return ip1
}

func (c *DBCollector) ZUnionWithScores(ctx context.Context, store redis.ZStore) (zp1 *redis.ZSliceCmd) {
	startTime := time.Now()

	zp1 = c.Storage.ZUnionWithScores(ctx, store)

	collectMetrics(c.collector, startTime, "ZUnionWithScores", zp1.Err())

	return zp1
}
