// Code generated by gowrap. DO NOT EDIT.
// template: template_trace
// gowrap: http://github.com/hexdigest/gowrap

package redis

//go:generate gowrap gen -p github.com/redis/go-redis/v9 -i Cmdable -t template_trace -o trace_methods.go -l ""

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
	"github.com/underbek/examples-go/tracing"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

func (t *DBTracer) ACLDryRun(ctx context.Context, username string, command ...interface{}) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ACLDryRun",
		trace.WithAttributes(attribute.String("username", username)),
	)
	defer traceSpan.End()

	return t.Storage.ACLDryRun(ctx, username, command...)
}

func (t *DBTracer) ACLLog(ctx context.Context, count int64) (ap1 *redis.ACLLogCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ACLLog",
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.ACLLog(ctx, count)
}

func (t *DBTracer) ACLLogReset(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ACLLogReset",
	)
	defer traceSpan.End()

	return t.Storage.ACLLogReset(ctx)
}

func (t *DBTracer) Append(ctx context.Context, key string, value string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Append",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.Append(ctx, key, value)
}

func (t *DBTracer) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) (kp1 *redis.KeyValuesCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BLMPop",
		trace.WithAttributes(attribute.String("direction", direction)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.BLMPop(ctx, timeout, direction, count, keys...)
}

func (t *DBTracer) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BLMove",
		trace.WithAttributes(attribute.String("source", source)),
		trace.WithAttributes(attribute.String("destination", destination)),
		trace.WithAttributes(attribute.String("srcpos", srcpos)),
		trace.WithAttributes(attribute.String("destpos", destpos)),
	)
	defer traceSpan.End()

	return t.Storage.BLMove(ctx, source, destination, srcpos, destpos, timeout)
}

func (t *DBTracer) BLPop(ctx context.Context, timeout time.Duration, keys ...string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BLPop",
	)
	defer traceSpan.End()

	return t.Storage.BLPop(ctx, timeout, keys...)
}

func (t *DBTracer) BRPop(ctx context.Context, timeout time.Duration, keys ...string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BRPop",
	)
	defer traceSpan.End()

	return t.Storage.BRPop(ctx, timeout, keys...)
}

func (t *DBTracer) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BRPopLPush",
		trace.WithAttributes(attribute.String("source", source)),
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.BRPopLPush(ctx, source, destination, timeout)
}

func (t *DBTracer) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) (zp1 *redis.ZSliceWithKeyCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BZMPop",
		trace.WithAttributes(attribute.String("order", order)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.BZMPop(ctx, timeout, order, count, keys...)
}

func (t *DBTracer) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) (zp1 *redis.ZWithKeyCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BZPopMax",
	)
	defer traceSpan.End()

	return t.Storage.BZPopMax(ctx, timeout, keys...)
}

func (t *DBTracer) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) (zp1 *redis.ZWithKeyCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BZPopMin",
	)
	defer traceSpan.End()

	return t.Storage.BZPopMin(ctx, timeout, keys...)
}

func (t *DBTracer) BgRewriteAOF(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BgRewriteAOF",
	)
	defer traceSpan.End()

	return t.Storage.BgRewriteAOF(ctx)
}

func (t *DBTracer) BgSave(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BgSave",
	)
	defer traceSpan.End()

	return t.Storage.BgSave(ctx)
}

func (t *DBTracer) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitCount",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.BitCount(ctx, key, bitCount)
}

func (t *DBTracer) BitField(ctx context.Context, key string, args ...interface{}) (ip1 *redis.IntSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitField",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.BitField(ctx, key, args...)
}

func (t *DBTracer) BitOpAnd(ctx context.Context, destKey string, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitOpAnd",
		trace.WithAttributes(attribute.String("destKey", destKey)),
	)
	defer traceSpan.End()

	return t.Storage.BitOpAnd(ctx, destKey, keys...)
}

func (t *DBTracer) BitOpNot(ctx context.Context, destKey string, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitOpNot",
		trace.WithAttributes(attribute.String("destKey", destKey)),
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.BitOpNot(ctx, destKey, key)
}

func (t *DBTracer) BitOpOr(ctx context.Context, destKey string, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitOpOr",
		trace.WithAttributes(attribute.String("destKey", destKey)),
	)
	defer traceSpan.End()

	return t.Storage.BitOpOr(ctx, destKey, keys...)
}

func (t *DBTracer) BitOpXor(ctx context.Context, destKey string, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitOpXor",
		trace.WithAttributes(attribute.String("destKey", destKey)),
	)
	defer traceSpan.End()

	return t.Storage.BitOpXor(ctx, destKey, keys...)
}

func (t *DBTracer) BitPos(ctx context.Context, key string, bit int64, pos ...int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitPos",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("bit", bit)),
	)
	defer traceSpan.End()

	return t.Storage.BitPos(ctx, key, bit, pos...)
}

func (t *DBTracer) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"BitPosSpan",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("end", end)),
		trace.WithAttributes(attribute.String("span", span)),
	)
	defer traceSpan.End()

	return t.Storage.BitPosSpan(ctx, key, bit, start, end, span)
}

func (t *DBTracer) ClientGetName(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientGetName",
	)
	defer traceSpan.End()

	return t.Storage.ClientGetName(ctx)
}

func (t *DBTracer) ClientID(ctx context.Context) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientID",
	)
	defer traceSpan.End()

	return t.Storage.ClientID(ctx)
}

func (t *DBTracer) ClientInfo(ctx context.Context) (cp1 *redis.ClientInfoCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientInfo",
	)
	defer traceSpan.End()

	return t.Storage.ClientInfo(ctx)
}

func (t *DBTracer) ClientKill(ctx context.Context, ipPort string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientKill",
		trace.WithAttributes(attribute.String("ipPort", ipPort)),
	)
	defer traceSpan.End()

	return t.Storage.ClientKill(ctx, ipPort)
}

func (t *DBTracer) ClientKillByFilter(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientKillByFilter",
	)
	defer traceSpan.End()

	return t.Storage.ClientKillByFilter(ctx, keys...)
}

func (t *DBTracer) ClientList(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientList",
	)
	defer traceSpan.End()

	return t.Storage.ClientList(ctx)
}

func (t *DBTracer) ClientPause(ctx context.Context, dur time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientPause",
	)
	defer traceSpan.End()

	return t.Storage.ClientPause(ctx, dur)
}

func (t *DBTracer) ClientUnblock(ctx context.Context, id int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientUnblock",
		trace.WithAttributes(attribute.Int64("id", id)),
	)
	defer traceSpan.End()

	return t.Storage.ClientUnblock(ctx, id)
}

func (t *DBTracer) ClientUnblockWithError(ctx context.Context, id int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientUnblockWithError",
		trace.WithAttributes(attribute.Int64("id", id)),
	)
	defer traceSpan.End()

	return t.Storage.ClientUnblockWithError(ctx, id)
}

func (t *DBTracer) ClientUnpause(ctx context.Context) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClientUnpause",
	)
	defer traceSpan.End()

	return t.Storage.ClientUnpause(ctx)
}

func (t *DBTracer) ClusterAddSlots(ctx context.Context, slots ...int) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterAddSlots",
	)
	defer traceSpan.End()

	return t.Storage.ClusterAddSlots(ctx, slots...)
}

func (t *DBTracer) ClusterAddSlotsRange(ctx context.Context, min int, max int) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterAddSlotsRange",
		trace.WithAttributes(attribute.Int("min", min)),
		trace.WithAttributes(attribute.Int("max", max)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterAddSlotsRange(ctx, min, max)
}

func (t *DBTracer) ClusterCountFailureReports(ctx context.Context, nodeID string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterCountFailureReports",
		trace.WithAttributes(attribute.String("nodeID", nodeID)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterCountFailureReports(ctx, nodeID)
}

func (t *DBTracer) ClusterCountKeysInSlot(ctx context.Context, slot int) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterCountKeysInSlot",
		trace.WithAttributes(attribute.Int("slot", slot)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterCountKeysInSlot(ctx, slot)
}

func (t *DBTracer) ClusterDelSlots(ctx context.Context, slots ...int) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterDelSlots",
	)
	defer traceSpan.End()

	return t.Storage.ClusterDelSlots(ctx, slots...)
}

func (t *DBTracer) ClusterDelSlotsRange(ctx context.Context, min int, max int) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterDelSlotsRange",
		trace.WithAttributes(attribute.Int("min", min)),
		trace.WithAttributes(attribute.Int("max", max)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterDelSlotsRange(ctx, min, max)
}

func (t *DBTracer) ClusterFailover(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterFailover",
	)
	defer traceSpan.End()

	return t.Storage.ClusterFailover(ctx)
}

func (t *DBTracer) ClusterForget(ctx context.Context, nodeID string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterForget",
		trace.WithAttributes(attribute.String("nodeID", nodeID)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterForget(ctx, nodeID)
}

func (t *DBTracer) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterGetKeysInSlot",
		trace.WithAttributes(attribute.Int("slot", slot)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterGetKeysInSlot(ctx, slot, count)
}

func (t *DBTracer) ClusterInfo(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterInfo",
	)
	defer traceSpan.End()

	return t.Storage.ClusterInfo(ctx)
}

func (t *DBTracer) ClusterKeySlot(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterKeySlot",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterKeySlot(ctx, key)
}

func (t *DBTracer) ClusterLinks(ctx context.Context) (cp1 *redis.ClusterLinksCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterLinks",
	)
	defer traceSpan.End()

	return t.Storage.ClusterLinks(ctx)
}

func (t *DBTracer) ClusterMeet(ctx context.Context, host string, port string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterMeet",
		trace.WithAttributes(attribute.String("host", host)),
		trace.WithAttributes(attribute.String("port", port)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterMeet(ctx, host, port)
}

func (t *DBTracer) ClusterMyShardID(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterMyShardID",
	)
	defer traceSpan.End()

	return t.Storage.ClusterMyShardID(ctx)
}

func (t *DBTracer) ClusterNodes(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterNodes",
	)
	defer traceSpan.End()

	return t.Storage.ClusterNodes(ctx)
}

func (t *DBTracer) ClusterReplicate(ctx context.Context, nodeID string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterReplicate",
		trace.WithAttributes(attribute.String("nodeID", nodeID)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterReplicate(ctx, nodeID)
}

func (t *DBTracer) ClusterResetHard(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterResetHard",
	)
	defer traceSpan.End()

	return t.Storage.ClusterResetHard(ctx)
}

func (t *DBTracer) ClusterResetSoft(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterResetSoft",
	)
	defer traceSpan.End()

	return t.Storage.ClusterResetSoft(ctx)
}

func (t *DBTracer) ClusterSaveConfig(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterSaveConfig",
	)
	defer traceSpan.End()

	return t.Storage.ClusterSaveConfig(ctx)
}

func (t *DBTracer) ClusterShards(ctx context.Context) (cp1 *redis.ClusterShardsCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterShards",
	)
	defer traceSpan.End()

	return t.Storage.ClusterShards(ctx)
}

func (t *DBTracer) ClusterSlaves(ctx context.Context, nodeID string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterSlaves",
		trace.WithAttributes(attribute.String("nodeID", nodeID)),
	)
	defer traceSpan.End()

	return t.Storage.ClusterSlaves(ctx, nodeID)
}

func (t *DBTracer) ClusterSlots(ctx context.Context) (cp1 *redis.ClusterSlotsCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ClusterSlots",
	)
	defer traceSpan.End()

	return t.Storage.ClusterSlots(ctx)
}

func (t *DBTracer) Command(ctx context.Context) (cp1 *redis.CommandsInfoCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Command",
	)
	defer traceSpan.End()

	return t.Storage.Command(ctx)
}

func (t *DBTracer) CommandGetKeys(ctx context.Context, commands ...interface{}) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"CommandGetKeys",
	)
	defer traceSpan.End()

	return t.Storage.CommandGetKeys(ctx, commands...)
}

func (t *DBTracer) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) (kp1 *redis.KeyFlagsCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"CommandGetKeysAndFlags",
	)
	defer traceSpan.End()

	return t.Storage.CommandGetKeysAndFlags(ctx, commands...)
}

func (t *DBTracer) CommandList(ctx context.Context, filter *redis.FilterBy) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"CommandList",
	)
	defer traceSpan.End()

	return t.Storage.CommandList(ctx, filter)
}

func (t *DBTracer) ConfigGet(ctx context.Context, parameter string) (mp1 *redis.MapStringStringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ConfigGet",
		trace.WithAttributes(attribute.String("parameter", parameter)),
	)
	defer traceSpan.End()

	return t.Storage.ConfigGet(ctx, parameter)
}

func (t *DBTracer) ConfigResetStat(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ConfigResetStat",
	)
	defer traceSpan.End()

	return t.Storage.ConfigResetStat(ctx)
}

func (t *DBTracer) ConfigRewrite(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ConfigRewrite",
	)
	defer traceSpan.End()

	return t.Storage.ConfigRewrite(ctx)
}

func (t *DBTracer) ConfigSet(ctx context.Context, parameter string, value string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ConfigSet",
		trace.WithAttributes(attribute.String("parameter", parameter)),
		trace.WithAttributes(attribute.String("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.ConfigSet(ctx, parameter, value)
}

func (t *DBTracer) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Copy",
		trace.WithAttributes(attribute.String("sourceKey", sourceKey)),
		trace.WithAttributes(attribute.String("destKey", destKey)),
		trace.WithAttributes(attribute.Int("db", db)),
	)
	defer traceSpan.End()

	return t.Storage.Copy(ctx, sourceKey, destKey, db, replace)
}

func (t *DBTracer) DBSize(ctx context.Context) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"DBSize",
	)
	defer traceSpan.End()

	return t.Storage.DBSize(ctx)
}

func (t *DBTracer) DebugObject(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"DebugObject",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.DebugObject(ctx, key)
}

func (t *DBTracer) Decr(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Decr",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Decr(ctx, key)
}

func (t *DBTracer) DecrBy(ctx context.Context, key string, decrement int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"DecrBy",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("decrement", decrement)),
	)
	defer traceSpan.End()

	return t.Storage.DecrBy(ctx, key, decrement)
}

func (t *DBTracer) Del(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Del",
	)
	defer traceSpan.End()

	return t.Storage.Del(ctx, keys...)
}

func (t *DBTracer) Dump(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Dump",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Dump(ctx, key)
}

func (t *DBTracer) Echo(ctx context.Context, message interface{}) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Echo",
	)
	defer traceSpan.End()

	return t.Storage.Echo(ctx, message)
}

func (t *DBTracer) Eval(ctx context.Context, script string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Eval",
		trace.WithAttributes(attribute.String("script", script)),
	)
	defer traceSpan.End()

	return t.Storage.Eval(ctx, script, keys, args...)
}

func (t *DBTracer) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"EvalRO",
		trace.WithAttributes(attribute.String("script", script)),
	)
	defer traceSpan.End()

	return t.Storage.EvalRO(ctx, script, keys, args...)
}

func (t *DBTracer) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"EvalSha",
		trace.WithAttributes(attribute.String("sha1", sha1)),
	)
	defer traceSpan.End()

	return t.Storage.EvalSha(ctx, sha1, keys, args...)
}

func (t *DBTracer) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"EvalShaRO",
		trace.WithAttributes(attribute.String("sha1", sha1)),
	)
	defer traceSpan.End()

	return t.Storage.EvalShaRO(ctx, sha1, keys, args...)
}

func (t *DBTracer) Exists(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Exists",
	)
	defer traceSpan.End()

	return t.Storage.Exists(ctx, keys...)
}

func (t *DBTracer) Expire(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Expire",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Expire(ctx, key, expiration)
}

func (t *DBTracer) ExpireAt(ctx context.Context, key string, tm time.Time) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ExpireAt",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ExpireAt(ctx, key, tm)
}

func (t *DBTracer) ExpireGT(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ExpireGT",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ExpireGT(ctx, key, expiration)
}

func (t *DBTracer) ExpireLT(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ExpireLT",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ExpireLT(ctx, key, expiration)
}

func (t *DBTracer) ExpireNX(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ExpireNX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ExpireNX(ctx, key, expiration)
}

func (t *DBTracer) ExpireTime(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ExpireTime",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ExpireTime(ctx, key)
}

func (t *DBTracer) ExpireXX(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ExpireXX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ExpireXX(ctx, key, expiration)
}

func (t *DBTracer) FCall(ctx context.Context, function string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FCall",
		trace.WithAttributes(attribute.String("function", function)),
	)
	defer traceSpan.End()

	return t.Storage.FCall(ctx, function, keys, args...)
}

func (t *DBTracer) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FCallRO",
		trace.WithAttributes(attribute.String("function", function)),
	)
	defer traceSpan.End()

	return t.Storage.FCallRO(ctx, function, keys, args...)
}

func (t *DBTracer) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) (cp1 *redis.Cmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FCallRo",
		trace.WithAttributes(attribute.String("function", function)),
	)
	defer traceSpan.End()

	return t.Storage.FCallRo(ctx, function, keys, args...)
}

func (t *DBTracer) FlushAll(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FlushAll",
	)
	defer traceSpan.End()

	return t.Storage.FlushAll(ctx)
}

func (t *DBTracer) FlushAllAsync(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FlushAllAsync",
	)
	defer traceSpan.End()

	return t.Storage.FlushAllAsync(ctx)
}

func (t *DBTracer) FlushDB(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FlushDB",
	)
	defer traceSpan.End()

	return t.Storage.FlushDB(ctx)
}

func (t *DBTracer) FlushDBAsync(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FlushDBAsync",
	)
	defer traceSpan.End()

	return t.Storage.FlushDBAsync(ctx)
}

func (t *DBTracer) FunctionDelete(ctx context.Context, libName string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionDelete",
		trace.WithAttributes(attribute.String("libName", libName)),
	)
	defer traceSpan.End()

	return t.Storage.FunctionDelete(ctx, libName)
}

func (t *DBTracer) FunctionDump(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionDump",
	)
	defer traceSpan.End()

	return t.Storage.FunctionDump(ctx)
}

func (t *DBTracer) FunctionFlush(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionFlush",
	)
	defer traceSpan.End()

	return t.Storage.FunctionFlush(ctx)
}

func (t *DBTracer) FunctionFlushAsync(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionFlushAsync",
	)
	defer traceSpan.End()

	return t.Storage.FunctionFlushAsync(ctx)
}

func (t *DBTracer) FunctionKill(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionKill",
	)
	defer traceSpan.End()

	return t.Storage.FunctionKill(ctx)
}

func (t *DBTracer) FunctionList(ctx context.Context, q redis.FunctionListQuery) (fp1 *redis.FunctionListCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionList",
	)
	defer traceSpan.End()

	return t.Storage.FunctionList(ctx, q)
}

func (t *DBTracer) FunctionLoad(ctx context.Context, code string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionLoad",
		trace.WithAttributes(attribute.String("code", code)),
	)
	defer traceSpan.End()

	return t.Storage.FunctionLoad(ctx, code)
}

func (t *DBTracer) FunctionLoadReplace(ctx context.Context, code string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionLoadReplace",
		trace.WithAttributes(attribute.String("code", code)),
	)
	defer traceSpan.End()

	return t.Storage.FunctionLoadReplace(ctx, code)
}

func (t *DBTracer) FunctionRestore(ctx context.Context, libDump string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionRestore",
		trace.WithAttributes(attribute.String("libDump", libDump)),
	)
	defer traceSpan.End()

	return t.Storage.FunctionRestore(ctx, libDump)
}

func (t *DBTracer) FunctionStats(ctx context.Context) (fp1 *redis.FunctionStatsCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"FunctionStats",
	)
	defer traceSpan.End()

	return t.Storage.FunctionStats(ctx)
}

func (t *DBTracer) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoAdd",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GeoAdd(ctx, key, geoLocation...)
}

func (t *DBTracer) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) (fp1 *redis.FloatCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoDist",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member1", member1)),
		trace.WithAttributes(attribute.String("member2", member2)),
		trace.WithAttributes(attribute.String("unit", unit)),
	)
	defer traceSpan.End()

	return t.Storage.GeoDist(ctx, key, member1, member2, unit)
}

func (t *DBTracer) GeoHash(ctx context.Context, key string, members ...string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoHash",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GeoHash(ctx, key, members...)
}

func (t *DBTracer) GeoPos(ctx context.Context, key string, members ...string) (gp1 *redis.GeoPosCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoPos",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GeoPos(ctx, key, members...)
}

func (t *DBTracer) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) (gp1 *redis.GeoLocationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoRadius",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Float64("longitude", longitude)),
		trace.WithAttributes(attribute.Float64("latitude", latitude)),
	)
	defer traceSpan.End()

	return t.Storage.GeoRadius(ctx, key, longitude, latitude, query)
}

func (t *DBTracer) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) (gp1 *redis.GeoLocationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoRadiusByMember",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.GeoRadiusByMember(ctx, key, member, query)
}

func (t *DBTracer) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoRadiusByMemberStore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.GeoRadiusByMemberStore(ctx, key, member, query)
}

func (t *DBTracer) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoRadiusStore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Float64("longitude", longitude)),
		trace.WithAttributes(attribute.Float64("latitude", latitude)),
	)
	defer traceSpan.End()

	return t.Storage.GeoRadiusStore(ctx, key, longitude, latitude, query)
}

func (t *DBTracer) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoSearch",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GeoSearch(ctx, key, q)
}

func (t *DBTracer) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) (gp1 *redis.GeoSearchLocationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoSearchLocation",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GeoSearchLocation(ctx, key, q)
}

func (t *DBTracer) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GeoSearchStore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("store", store)),
	)
	defer traceSpan.End()

	return t.Storage.GeoSearchStore(ctx, key, store, q)
}

func (t *DBTracer) Get(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Get",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Get(ctx, key)
}

func (t *DBTracer) GetBit(ctx context.Context, key string, offset int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GetBit",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("offset", offset)),
	)
	defer traceSpan.End()

	return t.Storage.GetBit(ctx, key, offset)
}

func (t *DBTracer) GetDel(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GetDel",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GetDel(ctx, key)
}

func (t *DBTracer) GetEx(ctx context.Context, key string, expiration time.Duration) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GetEx",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GetEx(ctx, key, expiration)
}

func (t *DBTracer) GetRange(ctx context.Context, key string, start int64, end int64) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GetRange",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("end", end)),
	)
	defer traceSpan.End()

	return t.Storage.GetRange(ctx, key, start, end)
}

func (t *DBTracer) GetSet(ctx context.Context, key string, value interface{}) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"GetSet",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.GetSet(ctx, key, value)
}

func (t *DBTracer) HDel(ctx context.Context, key string, fields ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HDel",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HDel(ctx, key, fields...)
}

func (t *DBTracer) HExists(ctx context.Context, key string, field string) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HExists",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("field", field)),
	)
	defer traceSpan.End()

	return t.Storage.HExists(ctx, key, field)
}

func (t *DBTracer) HGet(ctx context.Context, key string, field string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HGet",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("field", field)),
	)
	defer traceSpan.End()

	return t.Storage.HGet(ctx, key, field)
}

func (t *DBTracer) HGetAll(ctx context.Context, key string) (mp1 *redis.MapStringStringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HGetAll",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HGetAll(ctx, key)
}

func (t *DBTracer) HIncrBy(ctx context.Context, key string, field string, incr int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HIncrBy",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("field", field)),
		trace.WithAttributes(attribute.Int64("incr", incr)),
	)
	defer traceSpan.End()

	return t.Storage.HIncrBy(ctx, key, field, incr)
}

func (t *DBTracer) HIncrByFloat(ctx context.Context, key string, field string, incr float64) (fp1 *redis.FloatCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HIncrByFloat",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("field", field)),
		trace.WithAttributes(attribute.Float64("incr", incr)),
	)
	defer traceSpan.End()

	return t.Storage.HIncrByFloat(ctx, key, field, incr)
}

func (t *DBTracer) HKeys(ctx context.Context, key string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HKeys",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HKeys(ctx, key)
}

func (t *DBTracer) HLen(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HLen",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HLen(ctx, key)
}

func (t *DBTracer) HMGet(ctx context.Context, key string, fields ...string) (sp1 *redis.SliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HMGet",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HMGet(ctx, key, fields...)
}

func (t *DBTracer) HMSet(ctx context.Context, key string, values ...interface{}) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HMSet",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HMSet(ctx, key, values...)
}

func (t *DBTracer) HRandField(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HRandField",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.HRandField(ctx, key, count)
}

func (t *DBTracer) HRandFieldWithValues(ctx context.Context, key string, count int) (kp1 *redis.KeyValueSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HRandFieldWithValues",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.HRandFieldWithValues(ctx, key, count)
}

func (t *DBTracer) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HScan",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("cursor", int64(cursor))),
		trace.WithAttributes(attribute.String("match", match)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.HScan(ctx, key, cursor, match, count)
}

func (t *DBTracer) HSet(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HSet",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HSet(ctx, key, values...)
}

func (t *DBTracer) HSetNX(ctx context.Context, key string, field string, value interface{}) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HSetNX",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("field", field)),
	)
	defer traceSpan.End()

	return t.Storage.HSetNX(ctx, key, field, value)
}

func (t *DBTracer) HVals(ctx context.Context, key string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"HVals",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.HVals(ctx, key)
}

func (t *DBTracer) Incr(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Incr",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Incr(ctx, key)
}

func (t *DBTracer) IncrBy(ctx context.Context, key string, value int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"IncrBy",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.IncrBy(ctx, key, value)
}

func (t *DBTracer) IncrByFloat(ctx context.Context, key string, value float64) (fp1 *redis.FloatCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"IncrByFloat",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Float64("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.IncrByFloat(ctx, key, value)
}

func (t *DBTracer) Info(ctx context.Context, section ...string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Info",
	)
	defer traceSpan.End()

	return t.Storage.Info(ctx, section...)
}

func (t *DBTracer) Keys(ctx context.Context, pattern string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Keys",
		trace.WithAttributes(attribute.String("pattern", pattern)),
	)
	defer traceSpan.End()

	return t.Storage.Keys(ctx, pattern)
}

func (t *DBTracer) LCS(ctx context.Context, q *redis.LCSQuery) (lp1 *redis.LCSCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LCS",
	)
	defer traceSpan.End()

	return t.Storage.LCS(ctx, q)
}

func (t *DBTracer) LIndex(ctx context.Context, key string, index int64) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LIndex",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("index", index)),
	)
	defer traceSpan.End()

	return t.Storage.LIndex(ctx, key, index)
}

func (t *DBTracer) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LInsert",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("op", op)),
	)
	defer traceSpan.End()

	return t.Storage.LInsert(ctx, key, op, pivot, value)
}

func (t *DBTracer) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LInsertAfter",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.LInsertAfter(ctx, key, pivot, value)
}

func (t *DBTracer) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LInsertBefore",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.LInsertBefore(ctx, key, pivot, value)
}

func (t *DBTracer) LLen(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LLen",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.LLen(ctx, key)
}

func (t *DBTracer) LMPop(ctx context.Context, direction string, count int64, keys ...string) (kp1 *redis.KeyValuesCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LMPop",
		trace.WithAttributes(attribute.String("direction", direction)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.LMPop(ctx, direction, count, keys...)
}

func (t *DBTracer) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LMove",
		trace.WithAttributes(attribute.String("source", source)),
		trace.WithAttributes(attribute.String("destination", destination)),
		trace.WithAttributes(attribute.String("srcpos", srcpos)),
		trace.WithAttributes(attribute.String("destpos", destpos)),
	)
	defer traceSpan.End()

	return t.Storage.LMove(ctx, source, destination, srcpos, destpos)
}

func (t *DBTracer) LPop(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LPop",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.LPop(ctx, key)
}

func (t *DBTracer) LPopCount(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LPopCount",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.LPopCount(ctx, key, count)
}

func (t *DBTracer) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LPos",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.LPos(ctx, key, value, args)
}

func (t *DBTracer) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) (ip1 *redis.IntSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LPosCount",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("value", value)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.LPosCount(ctx, key, value, count, args)
}

func (t *DBTracer) LPush(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LPush",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.LPush(ctx, key, values...)
}

func (t *DBTracer) LPushX(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LPushX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.LPushX(ctx, key, values...)
}

func (t *DBTracer) LRange(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LRange",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.LRange(ctx, key, start, stop)
}

func (t *DBTracer) LRem(ctx context.Context, key string, count int64, value interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LRem",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.LRem(ctx, key, count, value)
}

func (t *DBTracer) LSet(ctx context.Context, key string, index int64, value interface{}) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LSet",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("index", index)),
	)
	defer traceSpan.End()

	return t.Storage.LSet(ctx, key, index, value)
}

func (t *DBTracer) LTrim(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LTrim",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.LTrim(ctx, key, start, stop)
}

func (t *DBTracer) LastSave(ctx context.Context) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"LastSave",
	)
	defer traceSpan.End()

	return t.Storage.LastSave(ctx)
}

func (t *DBTracer) MGet(ctx context.Context, keys ...string) (sp1 *redis.SliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"MGet",
	)
	defer traceSpan.End()

	return t.Storage.MGet(ctx, keys...)
}

func (t *DBTracer) MSet(ctx context.Context, values ...interface{}) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"MSet",
	)
	defer traceSpan.End()

	return t.Storage.MSet(ctx, values...)
}

func (t *DBTracer) MSetNX(ctx context.Context, values ...interface{}) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"MSetNX",
	)
	defer traceSpan.End()

	return t.Storage.MSetNX(ctx, values...)
}

func (t *DBTracer) MemoryUsage(ctx context.Context, key string, samples ...int) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"MemoryUsage",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.MemoryUsage(ctx, key, samples...)
}

func (t *DBTracer) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Migrate",
		trace.WithAttributes(attribute.String("host", host)),
		trace.WithAttributes(attribute.String("port", port)),
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("db", db)),
	)
	defer traceSpan.End()

	return t.Storage.Migrate(ctx, host, port, key, db, timeout)
}

func (t *DBTracer) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ModuleLoadex",
	)
	defer traceSpan.End()

	return t.Storage.ModuleLoadex(ctx, conf)
}

func (t *DBTracer) Move(ctx context.Context, key string, db int) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Move",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("db", db)),
	)
	defer traceSpan.End()

	return t.Storage.Move(ctx, key, db)
}

func (t *DBTracer) ObjectEncoding(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ObjectEncoding",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ObjectEncoding(ctx, key)
}

func (t *DBTracer) ObjectIdleTime(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ObjectIdleTime",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ObjectIdleTime(ctx, key)
}

func (t *DBTracer) ObjectRefCount(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ObjectRefCount",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ObjectRefCount(ctx, key)
}

func (t *DBTracer) PExpire(ctx context.Context, key string, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PExpire",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.PExpire(ctx, key, expiration)
}

func (t *DBTracer) PExpireAt(ctx context.Context, key string, tm time.Time) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PExpireAt",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.PExpireAt(ctx, key, tm)
}

func (t *DBTracer) PExpireTime(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PExpireTime",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.PExpireTime(ctx, key)
}

func (t *DBTracer) PFAdd(ctx context.Context, key string, els ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PFAdd",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.PFAdd(ctx, key, els...)
}

func (t *DBTracer) PFCount(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PFCount",
	)
	defer traceSpan.End()

	return t.Storage.PFCount(ctx, keys...)
}

func (t *DBTracer) PFMerge(ctx context.Context, dest string, keys ...string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PFMerge",
		trace.WithAttributes(attribute.String("dest", dest)),
	)
	defer traceSpan.End()

	return t.Storage.PFMerge(ctx, dest, keys...)
}

func (t *DBTracer) PTTL(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PTTL",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.PTTL(ctx, key)
}

func (t *DBTracer) Persist(ctx context.Context, key string) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Persist",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Persist(ctx, key)
}

func (t *DBTracer) Ping(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Ping",
	)
	defer traceSpan.End()

	return t.Storage.Ping(ctx)
}

func (t *DBTracer) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) (ca1 []redis.Cmder, err error) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Pipelined",
	)
	defer traceSpan.End()

	return t.Storage.Pipelined(ctx, fn)
}

func (t *DBTracer) PubSubChannels(ctx context.Context, pattern string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PubSubChannels",
		trace.WithAttributes(attribute.String("pattern", pattern)),
	)
	defer traceSpan.End()

	return t.Storage.PubSubChannels(ctx, pattern)
}

func (t *DBTracer) PubSubNumPat(ctx context.Context) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PubSubNumPat",
	)
	defer traceSpan.End()

	return t.Storage.PubSubNumPat(ctx)
}

func (t *DBTracer) PubSubNumSub(ctx context.Context, channels ...string) (mp1 *redis.MapStringIntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PubSubNumSub",
	)
	defer traceSpan.End()

	return t.Storage.PubSubNumSub(ctx, channels...)
}

func (t *DBTracer) PubSubShardChannels(ctx context.Context, pattern string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PubSubShardChannels",
		trace.WithAttributes(attribute.String("pattern", pattern)),
	)
	defer traceSpan.End()

	return t.Storage.PubSubShardChannels(ctx, pattern)
}

func (t *DBTracer) PubSubShardNumSub(ctx context.Context, channels ...string) (mp1 *redis.MapStringIntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"PubSubShardNumSub",
	)
	defer traceSpan.End()

	return t.Storage.PubSubShardNumSub(ctx, channels...)
}

func (t *DBTracer) Publish(ctx context.Context, channel string, message interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Publish",
		trace.WithAttributes(attribute.String("channel", channel)),
	)
	defer traceSpan.End()

	return t.Storage.Publish(ctx, channel, message)
}

func (t *DBTracer) Quit(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Quit",
	)
	defer traceSpan.End()

	return t.Storage.Quit(ctx)
}

func (t *DBTracer) RPop(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RPop",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.RPop(ctx, key)
}

func (t *DBTracer) RPopCount(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RPopCount",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.RPopCount(ctx, key, count)
}

func (t *DBTracer) RPopLPush(ctx context.Context, source string, destination string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RPopLPush",
		trace.WithAttributes(attribute.String("source", source)),
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.RPopLPush(ctx, source, destination)
}

func (t *DBTracer) RPush(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RPush",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.RPush(ctx, key, values...)
}

func (t *DBTracer) RPushX(ctx context.Context, key string, values ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RPushX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.RPushX(ctx, key, values...)
}

func (t *DBTracer) RandomKey(ctx context.Context) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RandomKey",
	)
	defer traceSpan.End()

	return t.Storage.RandomKey(ctx)
}

func (t *DBTracer) ReadOnly(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ReadOnly",
	)
	defer traceSpan.End()

	return t.Storage.ReadOnly(ctx)
}

func (t *DBTracer) ReadWrite(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ReadWrite",
	)
	defer traceSpan.End()

	return t.Storage.ReadWrite(ctx)
}

func (t *DBTracer) Rename(ctx context.Context, key string, newkey string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Rename",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("newkey", newkey)),
	)
	defer traceSpan.End()

	return t.Storage.Rename(ctx, key, newkey)
}

func (t *DBTracer) RenameNX(ctx context.Context, key string, newkey string) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RenameNX",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("newkey", newkey)),
	)
	defer traceSpan.End()

	return t.Storage.RenameNX(ctx, key, newkey)
}

func (t *DBTracer) Restore(ctx context.Context, key string, ttl time.Duration, value string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Restore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.Restore(ctx, key, ttl, value)
}

func (t *DBTracer) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"RestoreReplace",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.RestoreReplace(ctx, key, ttl, value)
}

func (t *DBTracer) SAdd(ctx context.Context, key string, members ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SAdd",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SAdd(ctx, key, members...)
}

func (t *DBTracer) SCard(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SCard",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SCard(ctx, key)
}

func (t *DBTracer) SDiff(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SDiff",
	)
	defer traceSpan.End()

	return t.Storage.SDiff(ctx, keys...)
}

func (t *DBTracer) SDiffStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SDiffStore",
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.SDiffStore(ctx, destination, keys...)
}

func (t *DBTracer) SInter(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SInter",
	)
	defer traceSpan.End()

	return t.Storage.SInter(ctx, keys...)
}

func (t *DBTracer) SInterCard(ctx context.Context, limit int64, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SInterCard",
		trace.WithAttributes(attribute.Int64("limit", limit)),
	)
	defer traceSpan.End()

	return t.Storage.SInterCard(ctx, limit, keys...)
}

func (t *DBTracer) SInterStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SInterStore",
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.SInterStore(ctx, destination, keys...)
}

func (t *DBTracer) SIsMember(ctx context.Context, key string, member interface{}) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SIsMember",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SIsMember(ctx, key, member)
}

func (t *DBTracer) SMIsMember(ctx context.Context, key string, members ...interface{}) (bp1 *redis.BoolSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SMIsMember",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SMIsMember(ctx, key, members...)
}

func (t *DBTracer) SMembers(ctx context.Context, key string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SMembers",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SMembers(ctx, key)
}

func (t *DBTracer) SMembersMap(ctx context.Context, key string) (sp1 *redis.StringStructMapCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SMembersMap",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SMembersMap(ctx, key)
}

func (t *DBTracer) SMove(ctx context.Context, source string, destination string, member interface{}) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SMove",
		trace.WithAttributes(attribute.String("source", source)),
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.SMove(ctx, source, destination, member)
}

func (t *DBTracer) SPop(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SPop",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SPop(ctx, key)
}

func (t *DBTracer) SPopN(ctx context.Context, key string, count int64) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SPopN",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.SPopN(ctx, key, count)
}

func (t *DBTracer) SPublish(ctx context.Context, channel string, message interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SPublish",
		trace.WithAttributes(attribute.String("channel", channel)),
	)
	defer traceSpan.End()

	return t.Storage.SPublish(ctx, channel, message)
}

func (t *DBTracer) SRandMember(ctx context.Context, key string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SRandMember",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SRandMember(ctx, key)
}

func (t *DBTracer) SRandMemberN(ctx context.Context, key string, count int64) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SRandMemberN",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.SRandMemberN(ctx, key, count)
}

func (t *DBTracer) SRem(ctx context.Context, key string, members ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SRem",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SRem(ctx, key, members...)
}

func (t *DBTracer) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SScan",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("cursor", int64(cursor))),
		trace.WithAttributes(attribute.String("match", match)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.SScan(ctx, key, cursor, match, count)
}

func (t *DBTracer) SUnion(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SUnion",
	)
	defer traceSpan.End()

	return t.Storage.SUnion(ctx, keys...)
}

func (t *DBTracer) SUnionStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SUnionStore",
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.SUnionStore(ctx, destination, keys...)
}

func (t *DBTracer) Save(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Save",
	)
	defer traceSpan.End()

	return t.Storage.Save(ctx)
}

func (t *DBTracer) Scan(ctx context.Context, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Scan",
		trace.WithAttributes(attribute.Int64("cursor", int64(cursor))),
		trace.WithAttributes(attribute.String("match", match)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.Scan(ctx, cursor, match, count)
}

func (t *DBTracer) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) (sp1 *redis.ScanCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ScanType",
		trace.WithAttributes(attribute.Int64("cursor", int64(cursor))),
		trace.WithAttributes(attribute.String("match", match)),
		trace.WithAttributes(attribute.Int64("count", count)),
		trace.WithAttributes(attribute.String("keyType", keyType)),
	)
	defer traceSpan.End()

	return t.Storage.ScanType(ctx, cursor, match, count, keyType)
}

func (t *DBTracer) ScriptExists(ctx context.Context, hashes ...string) (bp1 *redis.BoolSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ScriptExists",
	)
	defer traceSpan.End()

	return t.Storage.ScriptExists(ctx, hashes...)
}

func (t *DBTracer) ScriptFlush(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ScriptFlush",
	)
	defer traceSpan.End()

	return t.Storage.ScriptFlush(ctx)
}

func (t *DBTracer) ScriptKill(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ScriptKill",
	)
	defer traceSpan.End()

	return t.Storage.ScriptKill(ctx)
}

func (t *DBTracer) ScriptLoad(ctx context.Context, script string) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ScriptLoad",
		trace.WithAttributes(attribute.String("script", script)),
	)
	defer traceSpan.End()

	return t.Storage.ScriptLoad(ctx, script)
}

func (t *DBTracer) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Set",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Set(ctx, key, value, expiration)
}

func (t *DBTracer) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SetArgs",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SetArgs(ctx, key, value, a)
}

func (t *DBTracer) SetBit(ctx context.Context, key string, offset int64, value int) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SetBit",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("offset", offset)),
		trace.WithAttributes(attribute.Int("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.SetBit(ctx, key, offset, value)
}

func (t *DBTracer) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SetEx",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SetEx(ctx, key, value, expiration)
}

func (t *DBTracer) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SetNX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SetNX(ctx, key, value, expiration)
}

func (t *DBTracer) SetRange(ctx context.Context, key string, offset int64, value string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SetRange",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("offset", offset)),
		trace.WithAttributes(attribute.String("value", value)),
	)
	defer traceSpan.End()

	return t.Storage.SetRange(ctx, key, offset, value)
}

func (t *DBTracer) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) (bp1 *redis.BoolCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SetXX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SetXX(ctx, key, value, expiration)
}

func (t *DBTracer) Shutdown(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Shutdown",
	)
	defer traceSpan.End()

	return t.Storage.Shutdown(ctx)
}

func (t *DBTracer) ShutdownNoSave(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ShutdownNoSave",
	)
	defer traceSpan.End()

	return t.Storage.ShutdownNoSave(ctx)
}

func (t *DBTracer) ShutdownSave(ctx context.Context) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ShutdownSave",
	)
	defer traceSpan.End()

	return t.Storage.ShutdownSave(ctx)
}

func (t *DBTracer) SlaveOf(ctx context.Context, host string, port string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SlaveOf",
		trace.WithAttributes(attribute.String("host", host)),
		trace.WithAttributes(attribute.String("port", port)),
	)
	defer traceSpan.End()

	return t.Storage.SlaveOf(ctx, host, port)
}

func (t *DBTracer) SlowLogGet(ctx context.Context, num int64) (sp1 *redis.SlowLogCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SlowLogGet",
		trace.WithAttributes(attribute.Int64("num", num)),
	)
	defer traceSpan.End()

	return t.Storage.SlowLogGet(ctx, num)
}

func (t *DBTracer) Sort(ctx context.Context, key string, sort *redis.Sort) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Sort",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Sort(ctx, key, sort)
}

func (t *DBTracer) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) (sp1 *redis.SliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SortInterfaces",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SortInterfaces(ctx, key, sort)
}

func (t *DBTracer) SortRO(ctx context.Context, key string, sort *redis.Sort) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SortRO",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.SortRO(ctx, key, sort)
}

func (t *DBTracer) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"SortStore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("store", store)),
	)
	defer traceSpan.End()

	return t.Storage.SortStore(ctx, key, store, sort)
}

func (t *DBTracer) StrLen(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"StrLen",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.StrLen(ctx, key)
}

func (t *DBTracer) TTL(ctx context.Context, key string) (dp1 *redis.DurationCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"TTL",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.TTL(ctx, key)
}

func (t *DBTracer) Time(ctx context.Context) (tp1 *redis.TimeCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Time",
	)
	defer traceSpan.End()

	return t.Storage.Time(ctx)
}

func (t *DBTracer) Touch(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Touch",
	)
	defer traceSpan.End()

	return t.Storage.Touch(ctx, keys...)
}

func (t *DBTracer) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) (ca1 []redis.Cmder, err error) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"TxPipelined",
	)
	defer traceSpan.End()

	return t.Storage.TxPipelined(ctx, fn)
}

func (t *DBTracer) Type(ctx context.Context, key string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Type",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.Type(ctx, key)
}

func (t *DBTracer) Unlink(ctx context.Context, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"Unlink",
	)
	defer traceSpan.End()

	return t.Storage.Unlink(ctx, keys...)
}

func (t *DBTracer) XAck(ctx context.Context, stream string, group string, ids ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XAck",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
	)
	defer traceSpan.End()

	return t.Storage.XAck(ctx, stream, group, ids...)
}

func (t *DBTracer) XAdd(ctx context.Context, a *redis.XAddArgs) (sp1 *redis.StringCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XAdd",
	)
	defer traceSpan.End()

	return t.Storage.XAdd(ctx, a)
}

func (t *DBTracer) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) (xp1 *redis.XAutoClaimCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XAutoClaim",
	)
	defer traceSpan.End()

	return t.Storage.XAutoClaim(ctx, a)
}

func (t *DBTracer) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) (xp1 *redis.XAutoClaimJustIDCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XAutoClaimJustID",
	)
	defer traceSpan.End()

	return t.Storage.XAutoClaimJustID(ctx, a)
}

func (t *DBTracer) XClaim(ctx context.Context, a *redis.XClaimArgs) (xp1 *redis.XMessageSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XClaim",
	)
	defer traceSpan.End()

	return t.Storage.XClaim(ctx, a)
}

func (t *DBTracer) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XClaimJustID",
	)
	defer traceSpan.End()

	return t.Storage.XClaimJustID(ctx, a)
}

func (t *DBTracer) XDel(ctx context.Context, stream string, ids ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XDel",
		trace.WithAttributes(attribute.String("stream", stream)),
	)
	defer traceSpan.End()

	return t.Storage.XDel(ctx, stream, ids...)
}

func (t *DBTracer) XGroupCreate(ctx context.Context, stream string, group string, start string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XGroupCreate",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
		trace.WithAttributes(attribute.String("start", start)),
	)
	defer traceSpan.End()

	return t.Storage.XGroupCreate(ctx, stream, group, start)
}

func (t *DBTracer) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XGroupCreateConsumer",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
		trace.WithAttributes(attribute.String("consumer", consumer)),
	)
	defer traceSpan.End()

	return t.Storage.XGroupCreateConsumer(ctx, stream, group, consumer)
}

func (t *DBTracer) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XGroupCreateMkStream",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
		trace.WithAttributes(attribute.String("start", start)),
	)
	defer traceSpan.End()

	return t.Storage.XGroupCreateMkStream(ctx, stream, group, start)
}

func (t *DBTracer) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XGroupDelConsumer",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
		trace.WithAttributes(attribute.String("consumer", consumer)),
	)
	defer traceSpan.End()

	return t.Storage.XGroupDelConsumer(ctx, stream, group, consumer)
}

func (t *DBTracer) XGroupDestroy(ctx context.Context, stream string, group string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XGroupDestroy",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
	)
	defer traceSpan.End()

	return t.Storage.XGroupDestroy(ctx, stream, group)
}

func (t *DBTracer) XGroupSetID(ctx context.Context, stream string, group string, start string) (sp1 *redis.StatusCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XGroupSetID",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
		trace.WithAttributes(attribute.String("start", start)),
	)
	defer traceSpan.End()

	return t.Storage.XGroupSetID(ctx, stream, group, start)
}

func (t *DBTracer) XInfoConsumers(ctx context.Context, key string, group string) (xp1 *redis.XInfoConsumersCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XInfoConsumers",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("group", group)),
	)
	defer traceSpan.End()

	return t.Storage.XInfoConsumers(ctx, key, group)
}

func (t *DBTracer) XInfoGroups(ctx context.Context, key string) (xp1 *redis.XInfoGroupsCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XInfoGroups",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.XInfoGroups(ctx, key)
}

func (t *DBTracer) XInfoStream(ctx context.Context, key string) (xp1 *redis.XInfoStreamCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XInfoStream",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.XInfoStream(ctx, key)
}

func (t *DBTracer) XInfoStreamFull(ctx context.Context, key string, count int) (xp1 *redis.XInfoStreamFullCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XInfoStreamFull",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.XInfoStreamFull(ctx, key, count)
}

func (t *DBTracer) XLen(ctx context.Context, stream string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XLen",
		trace.WithAttributes(attribute.String("stream", stream)),
	)
	defer traceSpan.End()

	return t.Storage.XLen(ctx, stream)
}

func (t *DBTracer) XPending(ctx context.Context, stream string, group string) (xp1 *redis.XPendingCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XPending",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("group", group)),
	)
	defer traceSpan.End()

	return t.Storage.XPending(ctx, stream, group)
}

func (t *DBTracer) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) (xp1 *redis.XPendingExtCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XPendingExt",
	)
	defer traceSpan.End()

	return t.Storage.XPendingExt(ctx, a)
}

func (t *DBTracer) XRange(ctx context.Context, stream string, start string, stop string) (xp1 *redis.XMessageSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XRange",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("start", start)),
		trace.WithAttributes(attribute.String("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.XRange(ctx, stream, start, stop)
}

func (t *DBTracer) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) (xp1 *redis.XMessageSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XRangeN",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("start", start)),
		trace.WithAttributes(attribute.String("stop", stop)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.XRangeN(ctx, stream, start, stop, count)
}

func (t *DBTracer) XRead(ctx context.Context, a *redis.XReadArgs) (xp1 *redis.XStreamSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XRead",
	)
	defer traceSpan.End()

	return t.Storage.XRead(ctx, a)
}

func (t *DBTracer) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) (xp1 *redis.XStreamSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XReadGroup",
	)
	defer traceSpan.End()

	return t.Storage.XReadGroup(ctx, a)
}

func (t *DBTracer) XReadStreams(ctx context.Context, streams ...string) (xp1 *redis.XStreamSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XReadStreams",
	)
	defer traceSpan.End()

	return t.Storage.XReadStreams(ctx, streams...)
}

func (t *DBTracer) XRevRange(ctx context.Context, stream string, start string, stop string) (xp1 *redis.XMessageSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XRevRange",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("start", start)),
		trace.WithAttributes(attribute.String("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.XRevRange(ctx, stream, start, stop)
}

func (t *DBTracer) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) (xp1 *redis.XMessageSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XRevRangeN",
		trace.WithAttributes(attribute.String("stream", stream)),
		trace.WithAttributes(attribute.String("start", start)),
		trace.WithAttributes(attribute.String("stop", stop)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.XRevRangeN(ctx, stream, start, stop, count)
}

func (t *DBTracer) XTrimMaxLen(ctx context.Context, key string, maxLen int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XTrimMaxLen",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("maxLen", maxLen)),
	)
	defer traceSpan.End()

	return t.Storage.XTrimMaxLen(ctx, key, maxLen)
}

func (t *DBTracer) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XTrimMaxLenApprox",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("maxLen", maxLen)),
		trace.WithAttributes(attribute.Int64("limit", limit)),
	)
	defer traceSpan.End()

	return t.Storage.XTrimMaxLenApprox(ctx, key, maxLen, limit)
}

func (t *DBTracer) XTrimMinID(ctx context.Context, key string, minID string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XTrimMinID",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("minID", minID)),
	)
	defer traceSpan.End()

	return t.Storage.XTrimMinID(ctx, key, minID)
}

func (t *DBTracer) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"XTrimMinIDApprox",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("minID", minID)),
		trace.WithAttributes(attribute.Int64("limit", limit)),
	)
	defer traceSpan.End()

	return t.Storage.XTrimMinIDApprox(ctx, key, minID, limit)
}

func (t *DBTracer) ZAdd(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZAdd",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZAdd(ctx, key, members...)
}

func (t *DBTracer) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZAddArgs",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZAddArgs(ctx, key, args)
}

func (t *DBTracer) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) (fp1 *redis.FloatCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZAddArgsIncr",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZAddArgsIncr(ctx, key, args)
}

func (t *DBTracer) ZAddGT(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZAddGT",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZAddGT(ctx, key, members...)
}

func (t *DBTracer) ZAddLT(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZAddLT",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZAddLT(ctx, key, members...)
}

func (t *DBTracer) ZAddNX(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZAddNX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZAddNX(ctx, key, members...)
}

func (t *DBTracer) ZAddXX(ctx context.Context, key string, members ...redis.Z) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZAddXX",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZAddXX(ctx, key, members...)
}

func (t *DBTracer) ZCard(ctx context.Context, key string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZCard",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZCard(ctx, key)
}

func (t *DBTracer) ZCount(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZCount",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("min", min)),
		trace.WithAttributes(attribute.String("max", max)),
	)
	defer traceSpan.End()

	return t.Storage.ZCount(ctx, key, min, max)
}

func (t *DBTracer) ZDiff(ctx context.Context, keys ...string) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZDiff",
	)
	defer traceSpan.End()

	return t.Storage.ZDiff(ctx, keys...)
}

func (t *DBTracer) ZDiffStore(ctx context.Context, destination string, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZDiffStore",
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.ZDiffStore(ctx, destination, keys...)
}

func (t *DBTracer) ZDiffWithScores(ctx context.Context, keys ...string) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZDiffWithScores",
	)
	defer traceSpan.End()

	return t.Storage.ZDiffWithScores(ctx, keys...)
}

func (t *DBTracer) ZIncrBy(ctx context.Context, key string, increment float64, member string) (fp1 *redis.FloatCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZIncrBy",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Float64("increment", increment)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.ZIncrBy(ctx, key, increment, member)
}

func (t *DBTracer) ZInter(ctx context.Context, store *redis.ZStore) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZInter",
	)
	defer traceSpan.End()

	return t.Storage.ZInter(ctx, store)
}

func (t *DBTracer) ZInterCard(ctx context.Context, limit int64, keys ...string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZInterCard",
		trace.WithAttributes(attribute.Int64("limit", limit)),
	)
	defer traceSpan.End()

	return t.Storage.ZInterCard(ctx, limit, keys...)
}

func (t *DBTracer) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZInterStore",
		trace.WithAttributes(attribute.String("destination", destination)),
	)
	defer traceSpan.End()

	return t.Storage.ZInterStore(ctx, destination, store)
}

func (t *DBTracer) ZInterWithScores(ctx context.Context, store *redis.ZStore) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZInterWithScores",
	)
	defer traceSpan.End()

	return t.Storage.ZInterWithScores(ctx, store)
}

func (t *DBTracer) ZLexCount(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZLexCount",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("min", min)),
		trace.WithAttributes(attribute.String("max", max)),
	)
	defer traceSpan.End()

	return t.Storage.ZLexCount(ctx, key, min, max)
}

func (t *DBTracer) ZMPop(ctx context.Context, order string, count int64, keys ...string) (zp1 *redis.ZSliceWithKeyCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZMPop",
		trace.WithAttributes(attribute.String("order", order)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.ZMPop(ctx, order, count, keys...)
}

func (t *DBTracer) ZMScore(ctx context.Context, key string, members ...string) (fp1 *redis.FloatSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZMScore",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZMScore(ctx, key, members...)
}

func (t *DBTracer) ZPopMax(ctx context.Context, key string, count ...int64) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZPopMax",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZPopMax(ctx, key, count...)
}

func (t *DBTracer) ZPopMin(ctx context.Context, key string, count ...int64) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZPopMin",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZPopMin(ctx, key, count...)
}

func (t *DBTracer) ZRandMember(ctx context.Context, key string, count int) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRandMember",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.ZRandMember(ctx, key, count)
}

func (t *DBTracer) ZRandMemberWithScores(ctx context.Context, key string, count int) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRandMemberWithScores",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.ZRandMemberWithScores(ctx, key, count)
}

func (t *DBTracer) ZRange(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRange",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.ZRange(ctx, key, start, stop)
}

func (t *DBTracer) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRangeArgs",
	)
	defer traceSpan.End()

	return t.Storage.ZRangeArgs(ctx, z)
}

func (t *DBTracer) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRangeArgsWithScores",
	)
	defer traceSpan.End()

	return t.Storage.ZRangeArgsWithScores(ctx, z)
}

func (t *DBTracer) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRangeByLex",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZRangeByLex(ctx, key, opt)
}

func (t *DBTracer) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRangeByScore",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZRangeByScore(ctx, key, opt)
}

func (t *DBTracer) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRangeByScoreWithScores",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZRangeByScoreWithScores(ctx, key, opt)
}

func (t *DBTracer) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRangeStore",
		trace.WithAttributes(attribute.String("dst", dst)),
	)
	defer traceSpan.End()

	return t.Storage.ZRangeStore(ctx, dst, z)
}

func (t *DBTracer) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRangeWithScores",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.ZRangeWithScores(ctx, key, start, stop)
}

func (t *DBTracer) ZRank(ctx context.Context, key string, member string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRank",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.ZRank(ctx, key, member)
}

func (t *DBTracer) ZRankWithScore(ctx context.Context, key string, member string) (rp1 *redis.RankWithScoreCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRankWithScore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.ZRankWithScore(ctx, key, member)
}

func (t *DBTracer) ZRem(ctx context.Context, key string, members ...interface{}) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRem",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZRem(ctx, key, members...)
}

func (t *DBTracer) ZRemRangeByLex(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRemRangeByLex",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("min", min)),
		trace.WithAttributes(attribute.String("max", max)),
	)
	defer traceSpan.End()

	return t.Storage.ZRemRangeByLex(ctx, key, min, max)
}

func (t *DBTracer) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRemRangeByRank",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.ZRemRangeByRank(ctx, key, start, stop)
}

func (t *DBTracer) ZRemRangeByScore(ctx context.Context, key string, min string, max string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRemRangeByScore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("min", min)),
		trace.WithAttributes(attribute.String("max", max)),
	)
	defer traceSpan.End()

	return t.Storage.ZRemRangeByScore(ctx, key, min, max)
}

func (t *DBTracer) ZRevRange(ctx context.Context, key string, start int64, stop int64) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRevRange",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.ZRevRange(ctx, key, start, stop)
}

func (t *DBTracer) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRevRangeByLex",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZRevRangeByLex(ctx, key, opt)
}

func (t *DBTracer) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRevRangeByScore",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZRevRangeByScore(ctx, key, opt)
}

func (t *DBTracer) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRevRangeByScoreWithScores",
		trace.WithAttributes(attribute.String("key", key)),
	)
	defer traceSpan.End()

	return t.Storage.ZRevRangeByScoreWithScores(ctx, key, opt)
}

func (t *DBTracer) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRevRangeWithScores",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("start", start)),
		trace.WithAttributes(attribute.Int64("stop", stop)),
	)
	defer traceSpan.End()

	return t.Storage.ZRevRangeWithScores(ctx, key, start, stop)
}

func (t *DBTracer) ZRevRank(ctx context.Context, key string, member string) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRevRank",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.ZRevRank(ctx, key, member)
}

func (t *DBTracer) ZRevRankWithScore(ctx context.Context, key string, member string) (rp1 *redis.RankWithScoreCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZRevRankWithScore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.ZRevRankWithScore(ctx, key, member)
}

func (t *DBTracer) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) (sp1 *redis.ScanCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZScan",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.Int64("cursor", int64(cursor))),
		trace.WithAttributes(attribute.String("match", match)),
		trace.WithAttributes(attribute.Int64("count", count)),
	)
	defer traceSpan.End()

	return t.Storage.ZScan(ctx, key, cursor, match, count)
}

func (t *DBTracer) ZScore(ctx context.Context, key string, member string) (fp1 *redis.FloatCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZScore",
		trace.WithAttributes(attribute.String("key", key)),
		trace.WithAttributes(attribute.String("member", member)),
	)
	defer traceSpan.End()

	return t.Storage.ZScore(ctx, key, member)
}

func (t *DBTracer) ZUnion(ctx context.Context, store redis.ZStore) (sp1 *redis.StringSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZUnion",
	)
	defer traceSpan.End()

	return t.Storage.ZUnion(ctx, store)
}

func (t *DBTracer) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) (ip1 *redis.IntCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZUnionStore",
		trace.WithAttributes(attribute.String("dest", dest)),
	)
	defer traceSpan.End()

	return t.Storage.ZUnionStore(ctx, dest, store)
}

func (t *DBTracer) ZUnionWithScores(ctx context.Context, store redis.ZStore) (zp1 *redis.ZSliceCmd) {
	ctx, traceSpan := tracing.StartCustomSpan(ctx,
		trace.SpanKindInternal,
		"redis",
		"ZUnionWithScores",
	)
	defer traceSpan.End()

	return t.Storage.ZUnionWithScores(ctx, store)
}
