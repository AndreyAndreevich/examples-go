// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// EncryptorTypeCARD is a EncryptorType of type CARD.
	EncryptorTypeCARD EncryptorType = iota
	// EncryptorTypeCVV is a EncryptorType of type CVV.
	EncryptorTypeCVV
	// EncryptorTypeREQUISITE is a EncryptorType of type REQUISITE.
	EncryptorTypeREQUISITE
	// EncryptorTypeSECRET is a EncryptorType of type SECRET.
	EncryptorTypeSECRET
)

const _EncryptorTypeName = "CARDCVVREQUISITESECRET"

var _EncryptorTypeMap = map[EncryptorType]string{
	EncryptorTypeCARD:      _EncryptorTypeName[0:4],
	EncryptorTypeCVV:       _EncryptorTypeName[4:7],
	EncryptorTypeREQUISITE: _EncryptorTypeName[7:16],
	EncryptorTypeSECRET:    _EncryptorTypeName[16:22],
}

// String implements the Stringer interface.
func (x EncryptorType) String() string {
	if str, ok := _EncryptorTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EncryptorType(%d)", x)
}

var _EncryptorTypeValue = map[string]EncryptorType{
	_EncryptorTypeName[0:4]:   EncryptorTypeCARD,
	_EncryptorTypeName[4:7]:   EncryptorTypeCVV,
	_EncryptorTypeName[7:16]:  EncryptorTypeREQUISITE,
	_EncryptorTypeName[16:22]: EncryptorTypeSECRET,
}

// ParseEncryptorType attempts to convert a string to a EncryptorType.
func ParseEncryptorType(name string) (EncryptorType, error) {
	if x, ok := _EncryptorTypeValue[name]; ok {
		return x, nil
	}
	return EncryptorType(0), fmt.Errorf("%s is not a valid EncryptorType", name)
}

// MarshalText implements the text marshaller method.
func (x EncryptorType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EncryptorType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEncryptorType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var _EncryptorTypeErrNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *EncryptorType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = EncryptorType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = EncryptorType(v)
	case string:
		*x, err = ParseEncryptorType(v)
	case []byte:
		*x, err = ParseEncryptorType(string(v))
	case EncryptorType:
		*x = v
	case int:
		*x = EncryptorType(v)
	case *EncryptorType:
		if v == nil {
			return _EncryptorTypeErrNilPtr
		}
		*x = *v
	case uint:
		*x = EncryptorType(v)
	case uint64:
		*x = EncryptorType(v)
	case *int:
		if v == nil {
			return _EncryptorTypeErrNilPtr
		}
		*x = EncryptorType(*v)
	case *int64:
		if v == nil {
			return _EncryptorTypeErrNilPtr
		}
		*x = EncryptorType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = EncryptorType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return _EncryptorTypeErrNilPtr
		}
		*x = EncryptorType(*v)
	case *uint:
		if v == nil {
			return _EncryptorTypeErrNilPtr
		}
		*x = EncryptorType(*v)
	case *uint64:
		if v == nil {
			return _EncryptorTypeErrNilPtr
		}
		*x = EncryptorType(*v)
	case *string:
		if v == nil {
			return _EncryptorTypeErrNilPtr
		}
		*x, err = ParseEncryptorType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x EncryptorType) Value() (driver.Value, error) {
	return x.String(), nil
}
